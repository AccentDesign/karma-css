{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Karma CSS Karma CSS is a great starting point if you only want a barebones boilerplate. Includes All fixes from Normalize.css for supported browsers, a powerful mobile-first flexbox grid system, all base styles and the ability to customize the defaults for most of the styled elements. New in version 2 of Karma CSS! We have introduced components into Karma CSS. These include: Alerts Button Groups Icon Inputs Input Groups Messages Tooltips Why create another library? In a nutshell we wanted a basic set of styles that we can apply to our projects that mainly provide a consistent starting point for the css. We did not want to spend hours battling with vast arrays of component in large frameworks that unless you are prepared to invest more time tweaking and overriding styles, will inevitably look the same. We wanted to be able to: Hit the ground running Quickly be able to adjust core styles to gain a different look Build upon a simple base that will work with us rather than against us Be able to easily create variations of elements such as buttons Have a good set of useful mixins For the css to look the same in all modern browsers If this sounds like you give it a try. We welcome all feedback good or bad via Github . Browser Support We support all major browsers Chrome >= 45 Firefox >= 38 Edge >= 12 Explorer >= 10 iOS >= 9 Safari >= 9 Android >= 4.4 Opera >= 30","title":"Home"},{"location":"#karma-css","text":"Karma CSS is a great starting point if you only want a barebones boilerplate. Includes All fixes from Normalize.css for supported browsers, a powerful mobile-first flexbox grid system, all base styles and the ability to customize the defaults for most of the styled elements. New in version 2 of Karma CSS! We have introduced components into Karma CSS. These include: Alerts Button Groups Icon Inputs Input Groups Messages Tooltips","title":"Karma CSS"},{"location":"#why-create-another-library","text":"In a nutshell we wanted a basic set of styles that we can apply to our projects that mainly provide a consistent starting point for the css. We did not want to spend hours battling with vast arrays of component in large frameworks that unless you are prepared to invest more time tweaking and overriding styles, will inevitably look the same. We wanted to be able to: Hit the ground running Quickly be able to adjust core styles to gain a different look Build upon a simple base that will work with us rather than against us Be able to easily create variations of elements such as buttons Have a good set of useful mixins For the css to look the same in all modern browsers If this sounds like you give it a try. We welcome all feedback good or bad via Github .","title":"Why create another library?"},{"location":"#browser-support","text":"We support all major browsers Chrome >= 45 Firefox >= 38 Edge >= 12 Explorer >= 10 iOS >= 9 Safari >= 9 Android >= 4.4 Opera >= 30","title":"Browser Support"},{"location":"buttons/","text":"Buttons Basic All button element types and input types of button , submit , reset can be styled as buttons by adding the class .button . Non Button Types Additionally so can anchor tags or anything else for that matter. Coloured You can apply additional styles to buttons by adding a further class. There are two created out of the box .button-primary and .button-secondary . Outline Buttons By adding the class .button-outline you can have a button with a transparent background. The text colour is the main colour of the button. Clear Buttons By adding the class .button-clear you can have a button with a transparent background and border. The text colour is the main colour of the button. Additional Buttons Additional colours can easily be added to your variables, you just need a name, colour and font color: // as well as the default buttons the below will create a css helper for // \"button-danger\" that has red background and border with white text $buttons : ( // name color font-color danger : map-get ( $colors , \"red\" ) map-get ( $colors , \"white\" ) );","title":"Buttons"},{"location":"buttons/#buttons","text":"","title":"Buttons"},{"location":"buttons/#basic","text":"All button element types and input types of button , submit , reset can be styled as buttons by adding the class .button .","title":"Basic"},{"location":"buttons/#non-button-types","text":"Additionally so can anchor tags or anything else for that matter.","title":"Non Button Types"},{"location":"buttons/#coloured","text":"You can apply additional styles to buttons by adding a further class. There are two created out of the box .button-primary and .button-secondary .","title":"Coloured"},{"location":"buttons/#outline-buttons","text":"By adding the class .button-outline you can have a button with a transparent background. The text colour is the main colour of the button.","title":"Outline Buttons"},{"location":"buttons/#clear-buttons","text":"By adding the class .button-clear you can have a button with a transparent background and border. The text colour is the main colour of the button.","title":"Clear Buttons"},{"location":"buttons/#additional-buttons","text":"Additional colours can easily be added to your variables, you just need a name, colour and font color: // as well as the default buttons the below will create a css helper for // \"button-danger\" that has red background and border with white text $buttons : ( // name color font-color danger : map-get ( $colors , \"red\" ) map-get ( $colors , \"white\" ) );","title":"Additional Buttons"},{"location":"changelog/","text":"Changelog v2.0.1 added new variable $input-font-weight v2.0.0 addition of components alerts button-groups icon-inputs input-groups messages tooltips v1.9.8 update grid styles use predefined linting rules for ordering added transition helpers added x-cloak for alpine.js v1.9.7 fix table variations applying to child tables Set muted opacity via a variable $muted-opacity v1.9.6 fix wrong variables being passed to box-shadow mixin v1.9.5 added new variables $header-font-color v1.9.4 remove block from li new utility helpers .move cursor move v1.9.3 stop date type inputs collapsing height on ios v1.9.2 Re added missing webkit resets on inputs and buttons v1.9.1 re publish as readme not updating v1.9.0 Added scss linting Removed normalize and styled only supported browsers. Added 3 new colour functions that take in a colour name and returns color-darken() darken color-lighten() lighten color-a() add an alpha Added .d-grid for display: grid Added new button classes .button-clear and .button-outline that can be applied to any base or coloured button Added new variables $strong-font-weight $lead-font-weight $small-font-size Breaking Changes When defining colours and using the color() function you must wrap the name in parentheses eg color(\"primary\") v1.8.1 Reworked pre and code elements to work as they should with new variables $pre-font-size $pre-padding $pre-margin-bottom Added ability to change the header font family Vertical align td and th Added new variables for definition lists $dl-margin-bottom $dt-margin $dd-margin Added helper to hide an element on a single breakpoint hidden-xs hidden-sm hidden-md hidden-lg hidden-xl Added helper .list-style-reset to remove list-style , padding and margin v1.8.0 Refactor utilities into seperate files Removed the need for the framework to set any input heights to make them all equal heights Added a new variable $input-line-height to set the line height of form fields Added a new variable $button-line-height to set the line height of .button classes Remove unnecessary position relative from grid column Added variables to set h1 - h6 font weight, margins and line height Split all use of $generic-margin-bottom to seperate variables Added more control over the default button class by adding $button-default-border-color $button-default-font-color $button-border-width $button-border-radius Added new code variables $code-border-width $code-border-color $code-border-radius $code-inline-padding $code-block-padding Added new hr variables $hr-border-width $hr-border-color $hr-margin Added new table variable $table-border-width Added blockquote variables $blockquote-padding-x $blockquote-padding-y $blockquote-border-left-width $blockquote-border-left-color v1.7.1 Remove undocumented css from radios and checkboxes Added input placeholder color style Added new table variables $table-background-color $table-border-color $table-font-size v1.7.0 You only now need to define additional or overwrite existing colours and buttons within your variables Added a new mixin flip to flip an element on it's x/y/both axis's Added new css helpers .flip-x .flip-y .flip-both Fix bug with anchor transition speed using wrong variable Three new variables have been created to control transitions $link-transition $button-transition $input-transition ul and ol styles are now in the variables Breaking Changes Mixin abs-position renamed to position and has additional optional parameter $position Mixin vertical-align has been replaced with centerer Depreciated $link-transition-speed $button-transition-speed $input-transition-speed v1.6.2 Remove font size in code element Remove bottom margin on last child of blockquote v1.6.1 Refactor img-fluid to use a mixin v1.6.0 Added content columns mixin Added code font to all code , kbd , pre , samp elements v1.5.1 Added .no-print helper v1.5.0 Added mixin responsive-ratio Removed margin top from pre Added modernizr mixin for touch-hover Added modernizr mixin for transition-no-touch Added animation speeds for forms, links & buttons Added colour palette from http://clrs.cc/ Added colour palette for social media from https://www.materialui.co/socialcolors Added .h1 > .h6 v1.4.1 Added $code-font-family variable v1.4.0 Added 4 new mixin to build inputs input input-width input-size input-focus Added 1 new mixin to build buttons button-size Added some default values to the mixin button-hover Added a transition to input focus Added some flex and margin auto helpers Breaking Changes variable $input-border-focus has been replaced with $input-border-color-focus Renaming of helper classes .hidden > .d-hidden .inline > .d-inline .inline-block > .d-inline-block .block > .d-block .flex > .d-flex .display-table > .d-table .display-table-cell > .d-table-cell The originals have been moved into a utilities/_helpers-depreciated.scss which you can include in your own project to avoid renaming any. @include \"karma-css/scss/utilities/helpers-depreciated\"; v1.3.6 Added new mixin to vertical align elements using translate -50% v1.3.5 Removed font size in nested ul's due to ever decreasing in deeply nested v1.3.4 Added variable $input-use-full-width to set either the max-width:100% or width:100% Added new mixin input-width to get the above value v1.3.3 Added 3 new mixin to build buttons button button-color-variation button-hover Created sample blog and thumbnail listing page v1.3.2 Removed duplicate blockquote margin bottom from core Added variable $generic-margin-bottom for pre , dl , figure , table , p , ul , ol , form , blockquote Added variable $header-margin-bottom for h1 - h6 Added variable $button-default-bg-color for the base button v1.3.1 Added default button examples to test.html Added basic grid examples to test.html Fixed 0px lint warning Removed vertical align from button due to odd inline issue Added variable $input-font-color to set all inputs , selects , textareas Added variable $input-margin-bottom to set all inputs , selects , textareas , fieldsets v1.3.0 Added new variable $input-background-focus for when an input , select or textarea has focus Removed push-* and pull-* grid classes in favour of order-* Simplified gutter widths to single variable $grid-gutter-width v1.2.3 Added new variables that allow all form fields to be styled Reduced margins on hr , ul and ol Removed awkward defaults on inputs and textareas for ios","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v201","text":"added new variable $input-font-weight","title":"v2.0.1"},{"location":"changelog/#v200","text":"addition of components alerts button-groups icon-inputs input-groups messages tooltips","title":"v2.0.0"},{"location":"changelog/#v198","text":"update grid styles use predefined linting rules for ordering added transition helpers added x-cloak for alpine.js","title":"v1.9.8"},{"location":"changelog/#v197","text":"fix table variations applying to child tables Set muted opacity via a variable $muted-opacity","title":"v1.9.7"},{"location":"changelog/#v196","text":"fix wrong variables being passed to box-shadow mixin","title":"v1.9.6"},{"location":"changelog/#v195","text":"added new variables $header-font-color","title":"v1.9.5"},{"location":"changelog/#v194","text":"remove block from li new utility helpers .move cursor move","title":"v1.9.4"},{"location":"changelog/#v193","text":"stop date type inputs collapsing height on ios","title":"v1.9.3"},{"location":"changelog/#v192","text":"Re added missing webkit resets on inputs and buttons","title":"v1.9.2"},{"location":"changelog/#v191","text":"re publish as readme not updating","title":"v1.9.1"},{"location":"changelog/#v190","text":"Added scss linting Removed normalize and styled only supported browsers. Added 3 new colour functions that take in a colour name and returns color-darken() darken color-lighten() lighten color-a() add an alpha Added .d-grid for display: grid Added new button classes .button-clear and .button-outline that can be applied to any base or coloured button Added new variables $strong-font-weight $lead-font-weight $small-font-size","title":"v1.9.0"},{"location":"changelog/#breaking-changes","text":"When defining colours and using the color() function you must wrap the name in parentheses eg color(\"primary\")","title":"Breaking Changes"},{"location":"changelog/#v181","text":"Reworked pre and code elements to work as they should with new variables $pre-font-size $pre-padding $pre-margin-bottom Added ability to change the header font family Vertical align td and th Added new variables for definition lists $dl-margin-bottom $dt-margin $dd-margin Added helper to hide an element on a single breakpoint hidden-xs hidden-sm hidden-md hidden-lg hidden-xl Added helper .list-style-reset to remove list-style , padding and margin","title":"v1.8.1"},{"location":"changelog/#v180","text":"Refactor utilities into seperate files Removed the need for the framework to set any input heights to make them all equal heights Added a new variable $input-line-height to set the line height of form fields Added a new variable $button-line-height to set the line height of .button classes Remove unnecessary position relative from grid column Added variables to set h1 - h6 font weight, margins and line height Split all use of $generic-margin-bottom to seperate variables Added more control over the default button class by adding $button-default-border-color $button-default-font-color $button-border-width $button-border-radius Added new code variables $code-border-width $code-border-color $code-border-radius $code-inline-padding $code-block-padding Added new hr variables $hr-border-width $hr-border-color $hr-margin Added new table variable $table-border-width Added blockquote variables $blockquote-padding-x $blockquote-padding-y $blockquote-border-left-width $blockquote-border-left-color","title":"v1.8.0"},{"location":"changelog/#v171","text":"Remove undocumented css from radios and checkboxes Added input placeholder color style Added new table variables $table-background-color $table-border-color $table-font-size","title":"v1.7.1"},{"location":"changelog/#v170","text":"You only now need to define additional or overwrite existing colours and buttons within your variables Added a new mixin flip to flip an element on it's x/y/both axis's Added new css helpers .flip-x .flip-y .flip-both Fix bug with anchor transition speed using wrong variable Three new variables have been created to control transitions $link-transition $button-transition $input-transition ul and ol styles are now in the variables","title":"v1.7.0"},{"location":"changelog/#breaking-changes_1","text":"Mixin abs-position renamed to position and has additional optional parameter $position Mixin vertical-align has been replaced with centerer","title":"Breaking Changes"},{"location":"changelog/#depreciated","text":"$link-transition-speed $button-transition-speed $input-transition-speed","title":"Depreciated"},{"location":"changelog/#v162","text":"Remove font size in code element Remove bottom margin on last child of blockquote","title":"v1.6.2"},{"location":"changelog/#v161","text":"Refactor img-fluid to use a mixin","title":"v1.6.1"},{"location":"changelog/#v160","text":"Added content columns mixin Added code font to all code , kbd , pre , samp elements","title":"v1.6.0"},{"location":"changelog/#v151","text":"Added .no-print helper","title":"v1.5.1"},{"location":"changelog/#v150","text":"Added mixin responsive-ratio Removed margin top from pre Added modernizr mixin for touch-hover Added modernizr mixin for transition-no-touch Added animation speeds for forms, links & buttons Added colour palette from http://clrs.cc/ Added colour palette for social media from https://www.materialui.co/socialcolors Added .h1 > .h6","title":"v1.5.0"},{"location":"changelog/#v141","text":"Added $code-font-family variable","title":"v1.4.1"},{"location":"changelog/#v140","text":"Added 4 new mixin to build inputs input input-width input-size input-focus Added 1 new mixin to build buttons button-size Added some default values to the mixin button-hover Added a transition to input focus Added some flex and margin auto helpers","title":"v1.4.0"},{"location":"changelog/#breaking-changes_2","text":"variable $input-border-focus has been replaced with $input-border-color-focus Renaming of helper classes .hidden > .d-hidden .inline > .d-inline .inline-block > .d-inline-block .block > .d-block .flex > .d-flex .display-table > .d-table .display-table-cell > .d-table-cell The originals have been moved into a utilities/_helpers-depreciated.scss which you can include in your own project to avoid renaming any. @include \"karma-css/scss/utilities/helpers-depreciated\";","title":"Breaking Changes"},{"location":"changelog/#v136","text":"Added new mixin to vertical align elements using translate -50%","title":"v1.3.6"},{"location":"changelog/#v135","text":"Removed font size in nested ul's due to ever decreasing in deeply nested","title":"v1.3.5"},{"location":"changelog/#v134","text":"Added variable $input-use-full-width to set either the max-width:100% or width:100% Added new mixin input-width to get the above value","title":"v1.3.4"},{"location":"changelog/#v133","text":"Added 3 new mixin to build buttons button button-color-variation button-hover Created sample blog and thumbnail listing page","title":"v1.3.3"},{"location":"changelog/#v132","text":"Removed duplicate blockquote margin bottom from core Added variable $generic-margin-bottom for pre , dl , figure , table , p , ul , ol , form , blockquote Added variable $header-margin-bottom for h1 - h6 Added variable $button-default-bg-color for the base button","title":"v1.3.2"},{"location":"changelog/#v131","text":"Added default button examples to test.html Added basic grid examples to test.html Fixed 0px lint warning Removed vertical align from button due to odd inline issue Added variable $input-font-color to set all inputs , selects , textareas Added variable $input-margin-bottom to set all inputs , selects , textareas , fieldsets","title":"v1.3.1"},{"location":"changelog/#v130","text":"Added new variable $input-background-focus for when an input , select or textarea has focus Removed push-* and pull-* grid classes in favour of order-* Simplified gutter widths to single variable $grid-gutter-width","title":"v1.3.0"},{"location":"changelog/#v123","text":"Added new variables that allow all form fields to be styled Reduced margins on hr , ul and ol Removed awkward defaults on inputs and textareas for ios","title":"v1.2.3"},{"location":"code/","text":"Code A pre block has some default style","title":"Code"},{"location":"colours/","text":"Colours The default colours defined in Karma CSS are as follows. Colour Palette Base Base set of colours that are required within the framework. Karma CSS by default depends on these colours being defined. Cool An alternative cool colour palette. Warm An alternative warm colour palette. Greyscale Base set of greyscale colours. Social Media Base set of popular social media colours. For each defined color there are two classes created .b-{color} to set the background and the class .c-{color} to set the colour (text). Adding Your Own Colours You can define additional colours in your variables. Simply add the following $colors variable: // any colours defined here will create helpers for background and text colour // additionally you can redefine the colours in karma by adding them here too // so adding `primary` will overwrite the primary colour. $colors : ( \"somecolor\" : rgb ( 0 , 0 , 0 ) , \"othercolor\" : rgb ( 240 , 230 , 220 ) ); Helpers There is a handy function you can use in your css to get a colour by its name: . mydiv { border-color : color ( \"primary\" ); } As well as others to either lighten, darken or apply opacity // return a colour by its name and darken it by 10 % . mydiv { background-color : color-darken ( \"primary\" , 10 % ); } // return a colour by its name and lighten it by 10 % . mydiv { background-color : color-lighten ( \"primary\" , 10 % ); } // return a colour by its name and apply an alpha of . 8 . mydiv { background-color : color-a ( \"primary\" , .8 ); }","title":"Colours"},{"location":"colours/#colours","text":"The default colours defined in Karma CSS are as follows.","title":"Colours"},{"location":"colours/#colour-palette","text":"","title":"Colour Palette"},{"location":"colours/#base","text":"Base set of colours that are required within the framework. Karma CSS by default depends on these colours being defined.","title":"Base"},{"location":"colours/#cool","text":"An alternative cool colour palette.","title":"Cool"},{"location":"colours/#warm","text":"An alternative warm colour palette.","title":"Warm"},{"location":"colours/#greyscale","text":"Base set of greyscale colours.","title":"Greyscale"},{"location":"colours/#social-media","text":"Base set of popular social media colours. For each defined color there are two classes created .b-{color} to set the background and the class .c-{color} to set the colour (text).","title":"Social Media"},{"location":"colours/#adding-your-own-colours","text":"You can define additional colours in your variables. Simply add the following $colors variable: // any colours defined here will create helpers for background and text colour // additionally you can redefine the colours in karma by adding them here too // so adding `primary` will overwrite the primary colour. $colors : ( \"somecolor\" : rgb ( 0 , 0 , 0 ) , \"othercolor\" : rgb ( 240 , 230 , 220 ) );","title":"Adding Your Own Colours"},{"location":"colours/#helpers","text":"There is a handy function you can use in your css to get a colour by its name: . mydiv { border-color : color ( \"primary\" ); } As well as others to either lighten, darken or apply opacity // return a colour by its name and darken it by 10 % . mydiv { background-color : color-darken ( \"primary\" , 10 % ); } // return a colour by its name and lighten it by 10 % . mydiv { background-color : color-lighten ( \"primary\" , 10 % ); } // return a colour by its name and apply an alpha of . 8 . mydiv { background-color : color-a ( \"primary\" , .8 ); }","title":"Helpers"},{"location":"customizing/","text":"Customizing Getting Started The quickest possible way to get started is to download the quickstart project from Github, all you need to do is run npm install and npm run watch-css . File Structure If possible, avoid modifying the core files. You should create your own stylesheet that imports Karma CSS so you can extend it. We'll assume you installed it via package manager like npm, you\u2019ll have a file structure that looks like this: your-project/ \u251c\u2500\u2500 dist \u251c\u2500\u2500 scss \u2502 \u251c\u2500\u2500 _variables.scss \u2502 \u251c\u2500\u2500 style.scss \u2514\u2500\u2500 node_modules \u2514\u2500\u2500 karma-css \u2514\u2500\u2500 scss Importing In your style.scss , you\u2019ll import Karma\u2019s source files. Copy the below as a starting point: /* ensure you import your own variables here before ours */ @import \"variables\" ; /* karma core files */ @import \"node_modules/karma-css/scss/variables\" ; @import \"node_modules/karma-css/scss/import\" ; /* add your custom modules here */ /* karma utility helpers - probably best at the end of the stylesheet */ @import \"node_modules/karma-css/scss/utilities\" ; Variables All of our variables have the option !default meaning it is only used if the variable is not set. This allows you to overwrite any variable you choose. See more on :ref: variables . Variables like $colors and $buttons do have defaults they will append if not set. For buttons you will always have a primary and secondary, and all colours within karma will be added as well. Of course this does not stop you from changing the primary colour used or the button called primary. We only set what you have not. Adding Colours Say you want to add the colour whitesmoke , in your _variables.scss all you need is: $colors : ( \"whitesmoke\" : rgb ( 245 , 245 , 245 ) ); This will be available with all the others. Compiling The CSS Of course you can compile it with what ever means you wish. We use autoprefixer to add browser prefixes for the likes of IE10. So bear that in mind when you decide.","title":"Customizing"},{"location":"customizing/#customizing","text":"","title":"Customizing"},{"location":"customizing/#getting-started","text":"The quickest possible way to get started is to download the quickstart project from Github, all you need to do is run npm install and npm run watch-css .","title":"Getting Started"},{"location":"customizing/#file-structure","text":"If possible, avoid modifying the core files. You should create your own stylesheet that imports Karma CSS so you can extend it. We'll assume you installed it via package manager like npm, you\u2019ll have a file structure that looks like this: your-project/ \u251c\u2500\u2500 dist \u251c\u2500\u2500 scss \u2502 \u251c\u2500\u2500 _variables.scss \u2502 \u251c\u2500\u2500 style.scss \u2514\u2500\u2500 node_modules \u2514\u2500\u2500 karma-css \u2514\u2500\u2500 scss","title":"File Structure"},{"location":"customizing/#importing","text":"In your style.scss , you\u2019ll import Karma\u2019s source files. Copy the below as a starting point: /* ensure you import your own variables here before ours */ @import \"variables\" ; /* karma core files */ @import \"node_modules/karma-css/scss/variables\" ; @import \"node_modules/karma-css/scss/import\" ; /* add your custom modules here */ /* karma utility helpers - probably best at the end of the stylesheet */ @import \"node_modules/karma-css/scss/utilities\" ;","title":"Importing"},{"location":"customizing/#variables","text":"All of our variables have the option !default meaning it is only used if the variable is not set. This allows you to overwrite any variable you choose. See more on :ref: variables . Variables like $colors and $buttons do have defaults they will append if not set. For buttons you will always have a primary and secondary, and all colours within karma will be added as well. Of course this does not stop you from changing the primary colour used or the button called primary. We only set what you have not.","title":"Variables"},{"location":"customizing/#adding-colours","text":"Say you want to add the colour whitesmoke , in your _variables.scss all you need is: $colors : ( \"whitesmoke\" : rgb ( 245 , 245 , 245 ) ); This will be available with all the others.","title":"Adding Colours"},{"location":"customizing/#compiling-the-css","text":"Of course you can compile it with what ever means you wish. We use autoprefixer to add browser prefixes for the likes of IE10. So bear that in mind when you decide.","title":"Compiling The CSS"},{"location":"forms/","text":"Forms Form elements carry some very simple styles just to make them feel consistent, all input and select elements by default are the same height as buttons. This way they can be placed next to each other without looking odd.","title":"Forms"},{"location":"forms/#forms","text":"Form elements carry some very simple styles just to make them feel consistent, all input and select elements by default are the same height as buttons. This way they can be placed next to each other without looking odd.","title":"Forms"},{"location":"grid/","text":"Grid Intro Karma CSS includes a powerful mobile-first flexbox grid system for building layouts of all shapes and sizes. It\u2019s based on a 12 column layout and has multiple tiers, one for each media query range. You can use it with Sass mixins or our predefined classes Grid Options See how aspects of the grid system work across multiple devices with a handy table. All breakpoints and container widths are configurable within the variables. You can add or remove breakpoints as well as the number of columns in the grid. xSmall Small Medium Large xLarge < 576px \u2265576px \u2265768px \u2265992px \u22651200px Grid behavior Horizontal at all times Collapsed to start, horizontal above breakpoints Max container width None (auto) 540px 720px 960px 1140px Class prefix col- col-sm- col-md- col-lg- col-xl- Number of columns 12 Gutter width 30px (15px on each side of a column) Nestable Yes Offsetting Yes Ordering Yes Auto Layout Equal Width Columns Here are two grid layouts that apply to every device and viewport, from xs to xl . Setting One Column Width You can also just set the width of one column and others will auto adjust Responsive All Breakpoints Just using .col or .col-* classes means the grid is the same across all devices. Stacked to Horizontal Using a single set of .col-sm-* classes, you can create a basic grid system that starts out stacked on extra small devices before becoming horizontal on desktop (small) devices. Mix and Match Don\u2019t want your columns to simply stack in some grid tiers? Use a combination of different classes for each tier as needed. See the example below for a better idea of how it all works. No Gutters The gutters between columns in our predefined grid classes can be removed with .no-gutters . This removes the negative margins from .row and the horizontal padding from all immediate children columns. Here\u2019s the source code for creating these styles. Note that column overrides are scoped to only the first children columns and are targeted via attribute selector. While this generates a more specific selector, column padding can still be further customised with spacing utilities. .no-gutters { margin-right : 0 ; margin-left : 0 ; > .col , > [ class *= \"col-\" ] { padding-right : 0 ; padding-left : 0 ; } } In practice, here\u2019s how it looks. Note you can continue to use this with all other predefined grid classes (including column widths, responsive tiers, reorders, and more). Ordering Use the .order-* for controlling the visual order of your content. Offsetting Columns Move columns to the right using .offset-md-* classes. These classes increase the left margin of a column by * columns. For example, .offset-md-4 moves .col-md-4 over four columns.","title":"Grid"},{"location":"grid/#grid","text":"","title":"Grid"},{"location":"grid/#intro","text":"Karma CSS includes a powerful mobile-first flexbox grid system for building layouts of all shapes and sizes. It\u2019s based on a 12 column layout and has multiple tiers, one for each media query range. You can use it with Sass mixins or our predefined classes","title":"Intro"},{"location":"grid/#grid-options","text":"See how aspects of the grid system work across multiple devices with a handy table. All breakpoints and container widths are configurable within the variables. You can add or remove breakpoints as well as the number of columns in the grid. xSmall Small Medium Large xLarge < 576px \u2265576px \u2265768px \u2265992px \u22651200px Grid behavior Horizontal at all times Collapsed to start, horizontal above breakpoints Max container width None (auto) 540px 720px 960px 1140px Class prefix col- col-sm- col-md- col-lg- col-xl- Number of columns 12 Gutter width 30px (15px on each side of a column) Nestable Yes Offsetting Yes Ordering Yes","title":"Grid Options"},{"location":"grid/#auto-layout","text":"","title":"Auto Layout"},{"location":"grid/#equal-width-columns","text":"Here are two grid layouts that apply to every device and viewport, from xs to xl .","title":"Equal Width Columns"},{"location":"grid/#setting-one-column-width","text":"You can also just set the width of one column and others will auto adjust","title":"Setting One Column Width"},{"location":"grid/#responsive","text":"","title":"Responsive"},{"location":"grid/#all-breakpoints","text":"Just using .col or .col-* classes means the grid is the same across all devices.","title":"All Breakpoints"},{"location":"grid/#stacked-to-horizontal","text":"Using a single set of .col-sm-* classes, you can create a basic grid system that starts out stacked on extra small devices before becoming horizontal on desktop (small) devices.","title":"Stacked to Horizontal"},{"location":"grid/#mix-and-match","text":"Don\u2019t want your columns to simply stack in some grid tiers? Use a combination of different classes for each tier as needed. See the example below for a better idea of how it all works.","title":"Mix and Match"},{"location":"grid/#no-gutters","text":"The gutters between columns in our predefined grid classes can be removed with .no-gutters . This removes the negative margins from .row and the horizontal padding from all immediate children columns. Here\u2019s the source code for creating these styles. Note that column overrides are scoped to only the first children columns and are targeted via attribute selector. While this generates a more specific selector, column padding can still be further customised with spacing utilities. .no-gutters { margin-right : 0 ; margin-left : 0 ; > .col , > [ class *= \"col-\" ] { padding-right : 0 ; padding-left : 0 ; } } In practice, here\u2019s how it looks. Note you can continue to use this with all other predefined grid classes (including column widths, responsive tiers, reorders, and more).","title":"No Gutters"},{"location":"grid/#ordering","text":"Use the .order-* for controlling the visual order of your content.","title":"Ordering"},{"location":"grid/#offsetting-columns","text":"Move columns to the right using .offset-md-* classes. These classes increase the left margin of a column by * columns. For example, .offset-md-4 moves .col-md-4 over four columns.","title":"Offsetting Columns"},{"location":"installation/","text":"Installation Using the Starter Project The quickest way to get started is use the starter project from Github . Either by cloning as below or you can download the latest version here . git clone https://github.com/AccentDesign/karma-css-starter.git Then simply run the following: npm install npm run watch-css Other Installation Methods The package can be installed through npm: npm install karma-css --save Or bower: bower install karma-css Or by cloning the repo over at Github : git clone https://github.com/AccentDesign/karma-css.git Or if you only want the default grid, styles and utility helpers you can use a cdn: < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/karma-css@latest/dist/karma.min.css\" >","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#using-the-starter-project","text":"The quickest way to get started is use the starter project from Github . Either by cloning as below or you can download the latest version here . git clone https://github.com/AccentDesign/karma-css-starter.git Then simply run the following: npm install npm run watch-css","title":"Using the Starter Project"},{"location":"installation/#other-installation-methods","text":"The package can be installed through npm: npm install karma-css --save Or bower: bower install karma-css Or by cloning the repo over at Github : git clone https://github.com/AccentDesign/karma-css.git Or if you only want the default grid, styles and utility helpers you can use a cdn: < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/karma-css@latest/dist/karma.min.css\" >","title":"Other Installation Methods"},{"location":"layout/","text":"Layout Containers Containers are the most basic layout element in Karma CSS and are required when using our default grid system. Choose from a responsive, fixed-width container (meaning its max-width changes at each breakpoint) or fluid-width (meaning it\u2019s 100% wide all the time). While containers can be nested, most layouts do not require a nested container. < div class = \"container\" > <!-- Content here --> </ div > Use container-fluid for a full width container, spanning the entire width of the viewport. < div class = \"container-fluid\" > <!-- Content here --> </ div > Responsive Breakpoints We use a handful of media queries to create sensible breakpoints for our layouts and interfaces. These breakpoints are mostly based on minimum viewport widths and allow us to scale up elements as the viewport changes. Karma CSS primarily uses the following media query ranges\u2014or breakpoints\u2014in our source Sass files for our layout, grid system, and components. // Extra small devices (portrait phones, less than 576px) // No media query since this is the default in Karma CSS // Small devices (landscape phones, 576px and up) @media ( min-width : 576 px ) { ... } // Medium devices (tablets, 768px and up) @media ( min-width : 768 px ) { ... } // Large devices (desktops, 992px and up) @media ( min-width : 992 px ) { ... } // Extra large devices (large desktops, 1200px and up) @media ( min-width : 1200 px ) { ... } Since we write our source CSS in Sass, all our media queries are available via Sass mixins: @include media-breakpoint-up ( xs ) { ... } @include media-breakpoint-up ( sm ) { ... } @include media-breakpoint-up ( md ) { ... } @include media-breakpoint-up ( lg ) { ... } @include media-breakpoint-up ( xl ) { ... } // Example usage: @include media-breakpoint-up ( sm ) { .some-class { display : block ; } } We occasionally use media queries that go in the other direction (the given screen size or smaller): // Extra small devices (portrait phones, less than 576px) @media ( max-width : 575 px ) { ... } // Small devices (landscape phones, less than 768px) @media ( max-width : 767 px ) { ... } // Medium devices (tablets, less than 992px) @media ( max-width : 991 px ) { ... } // Large devices (desktops, less than 1200px) @media ( max-width : 1199 px ) { ... } // Extra large devices (large desktops) // No media query since the extra-large breakpoint has no upper bound on its width Once again, these media queries are also available via Sass mixins: @include media-breakpoint-down ( xs ) { ... } @include media-breakpoint-down ( sm ) { ... } @include media-breakpoint-down ( md ) { ... } @include media-breakpoint-down ( lg ) { ... } There are also media queries and mixins for targeting a single segment of screen sizes using the minimum and maximum breakpoint widths. // Extra small devices (portrait phones, less than 576px) @media ( max-width : 575 px ) { ... } // Small devices (landscape phones, 576px and up) @media ( min-width : 576 px ) and ( max-width : 767 px ) { ... } // Medium devices (tablets, 768px and up) @media ( min-width : 768 px ) and ( max-width : 991 px ) { ... } // Large devices (desktops, 992px and up) @media ( min-width : 992 px ) and ( max-width : 1199 px ) { ... } // Extra large devices (large desktops, 1200px and up) @media ( min-width : 1200 px ) { ... } These media queries are also available via Sass mixins: @include media-breakpoint-only ( xs ) { ... } @include media-breakpoint-only ( sm ) { ... } @include media-breakpoint-only ( md ) { ... } @include media-breakpoint-only ( lg ) { ... } @include media-breakpoint-only ( xl ) { ... } Similarly, media queries may span multiple breakpoint widths: // Example // Apply styles starting from medium devices and up to extra large devices @media ( min-width : 768 px ) and ( max-width : 1199 px ) { ... } The Sass mixin for targeting the same screen size range would be: @include media-breakpoint-between ( md , xl ) { ... } z-indexes As a solution to the problem of littering your css with random z-index: 99999; we have included a helper. Within variables there is the following setting: $z-layers : ( 'default' : 1 ) !default ; The idea is that you can define additional layers and then get the correct z-index using a built in function // here the top layers z-index will be 2 $z-layers : ( 'top' : 2 'bottom' : 1 ) !default ; The order you put them in the array is up to you. You can then pull the correct z-index like: .my-top-layer { z-index : zindex ( 'top' ); }","title":"Layout"},{"location":"layout/#layout","text":"","title":"Layout"},{"location":"layout/#containers","text":"Containers are the most basic layout element in Karma CSS and are required when using our default grid system. Choose from a responsive, fixed-width container (meaning its max-width changes at each breakpoint) or fluid-width (meaning it\u2019s 100% wide all the time). While containers can be nested, most layouts do not require a nested container. < div class = \"container\" > <!-- Content here --> </ div > Use container-fluid for a full width container, spanning the entire width of the viewport. < div class = \"container-fluid\" > <!-- Content here --> </ div >","title":"Containers"},{"location":"layout/#responsive-breakpoints","text":"We use a handful of media queries to create sensible breakpoints for our layouts and interfaces. These breakpoints are mostly based on minimum viewport widths and allow us to scale up elements as the viewport changes. Karma CSS primarily uses the following media query ranges\u2014or breakpoints\u2014in our source Sass files for our layout, grid system, and components. // Extra small devices (portrait phones, less than 576px) // No media query since this is the default in Karma CSS // Small devices (landscape phones, 576px and up) @media ( min-width : 576 px ) { ... } // Medium devices (tablets, 768px and up) @media ( min-width : 768 px ) { ... } // Large devices (desktops, 992px and up) @media ( min-width : 992 px ) { ... } // Extra large devices (large desktops, 1200px and up) @media ( min-width : 1200 px ) { ... } Since we write our source CSS in Sass, all our media queries are available via Sass mixins: @include media-breakpoint-up ( xs ) { ... } @include media-breakpoint-up ( sm ) { ... } @include media-breakpoint-up ( md ) { ... } @include media-breakpoint-up ( lg ) { ... } @include media-breakpoint-up ( xl ) { ... } // Example usage: @include media-breakpoint-up ( sm ) { .some-class { display : block ; } } We occasionally use media queries that go in the other direction (the given screen size or smaller): // Extra small devices (portrait phones, less than 576px) @media ( max-width : 575 px ) { ... } // Small devices (landscape phones, less than 768px) @media ( max-width : 767 px ) { ... } // Medium devices (tablets, less than 992px) @media ( max-width : 991 px ) { ... } // Large devices (desktops, less than 1200px) @media ( max-width : 1199 px ) { ... } // Extra large devices (large desktops) // No media query since the extra-large breakpoint has no upper bound on its width Once again, these media queries are also available via Sass mixins: @include media-breakpoint-down ( xs ) { ... } @include media-breakpoint-down ( sm ) { ... } @include media-breakpoint-down ( md ) { ... } @include media-breakpoint-down ( lg ) { ... } There are also media queries and mixins for targeting a single segment of screen sizes using the minimum and maximum breakpoint widths. // Extra small devices (portrait phones, less than 576px) @media ( max-width : 575 px ) { ... } // Small devices (landscape phones, 576px and up) @media ( min-width : 576 px ) and ( max-width : 767 px ) { ... } // Medium devices (tablets, 768px and up) @media ( min-width : 768 px ) and ( max-width : 991 px ) { ... } // Large devices (desktops, 992px and up) @media ( min-width : 992 px ) and ( max-width : 1199 px ) { ... } // Extra large devices (large desktops, 1200px and up) @media ( min-width : 1200 px ) { ... } These media queries are also available via Sass mixins: @include media-breakpoint-only ( xs ) { ... } @include media-breakpoint-only ( sm ) { ... } @include media-breakpoint-only ( md ) { ... } @include media-breakpoint-only ( lg ) { ... } @include media-breakpoint-only ( xl ) { ... } Similarly, media queries may span multiple breakpoint widths: // Example // Apply styles starting from medium devices and up to extra large devices @media ( min-width : 768 px ) and ( max-width : 1199 px ) { ... } The Sass mixin for targeting the same screen size range would be: @include media-breakpoint-between ( md , xl ) { ... }","title":"Responsive Breakpoints"},{"location":"layout/#z-indexes","text":"As a solution to the problem of littering your css with random z-index: 99999; we have included a helper. Within variables there is the following setting: $z-layers : ( 'default' : 1 ) !default ; The idea is that you can define additional layers and then get the correct z-index using a built in function // here the top layers z-index will be 2 $z-layers : ( 'top' : 2 'bottom' : 1 ) !default ; The order you put them in the array is up to you. You can then pull the correct z-index like: .my-top-layer { z-index : zindex ( 'top' ); }","title":"z-indexes"},{"location":"samples/","text":"Samples Some simple templates built with Karma CSS. Note Where at all possible these templates have been written only using the base styles and their default variables defined in Karma CSS. They do not represent its full potential. Blog A simple blog template written only using the default styles in Karma CSS. View template Gallery A simple image gallery template written only using the default styles in Karma CSS. View template Login A simple login template written only using the default styles in Karma CSS. View template","title":"Samples"},{"location":"samples/#samples","text":"Some simple templates built with Karma CSS. Note Where at all possible these templates have been written only using the base styles and their default variables defined in Karma CSS. They do not represent its full potential.","title":"Samples"},{"location":"samples/#blog","text":"A simple blog template written only using the default styles in Karma CSS. View template","title":"Blog"},{"location":"samples/#gallery","text":"A simple image gallery template written only using the default styles in Karma CSS. View template","title":"Gallery"},{"location":"samples/#login","text":"A simple login template written only using the default styles in Karma CSS. View template","title":"Login"},{"location":"tables/","text":"Tables Basic Tables carry some very simple styles just to make them feel consistent, they have a width of 100% so they fill their parent element. Styling There are several additional classes that can be applied to tables: table-bordered apply a border to the table table-hover highlight row on hover table-striped alternating row background colors table-headed add background color to the header All colors are defined in variables. Example with all additional classes. Responsive Tables dont work well on smaller screens, one way of fixing this is to wrap the table in a div with auto scrolling. This will enable the table to take up as much space as needed and enable you to scroll left and right. < div class = \"scroll-x\" >< table > ... </ table ></ div >","title":"Tables"},{"location":"tables/#tables","text":"","title":"Tables"},{"location":"tables/#basic","text":"Tables carry some very simple styles just to make them feel consistent, they have a width of 100% so they fill their parent element.","title":"Basic"},{"location":"tables/#styling","text":"There are several additional classes that can be applied to tables: table-bordered apply a border to the table table-hover highlight row on hover table-striped alternating row background colors table-headed add background color to the header All colors are defined in variables. Example with all additional classes.","title":"Styling"},{"location":"tables/#responsive","text":"Tables dont work well on smaller screens, one way of fixing this is to wrap the table in a div with auto scrolling. This will enable the table to take up as much space as needed and enable you to scroll left and right. < div class = \"scroll-x\" >< table > ... </ table ></ div >","title":"Responsive"},{"location":"typography/","text":"Typography Font The base type is Open Sans at 15px over 1.6 line height (24px), html is set to 62.5% so that all the REM measurements throughout Karma CSS are based on 10px sizing. So basically 1.5rem = 15px. Headings All heading h1 through to h6 are available. Use the included utility classes to recreate the small secondary heading text Inline Text Blockquote Blockquotes have also been styled. You can also add additional content and apply additional styles. Address Address have basic styles Lists Unordered lists have basic styles As well as ordered lists Horizontal Rule","title":"Typography"},{"location":"typography/#typography","text":"","title":"Typography"},{"location":"typography/#font","text":"The base type is Open Sans at 15px over 1.6 line height (24px), html is set to 62.5% so that all the REM measurements throughout Karma CSS are based on 10px sizing. So basically 1.5rem = 15px.","title":"Font"},{"location":"typography/#headings","text":"All heading h1 through to h6 are available. Use the included utility classes to recreate the small secondary heading text","title":"Headings"},{"location":"typography/#inline-text","text":"","title":"Inline Text"},{"location":"typography/#blockquote","text":"Blockquotes have also been styled. You can also add additional content and apply additional styles.","title":"Blockquote"},{"location":"typography/#address","text":"Address have basic styles","title":"Address"},{"location":"typography/#lists","text":"Unordered lists have basic styles As well as ordered lists","title":"Lists"},{"location":"typography/#horizontal-rule","text":"","title":"Horizontal Rule"},{"location":"utilities/","text":"Utility Helpers Below is a list of all the utilites and their description within Karma CSS. Alignment align-top Vertically align to the top align-bottom Vertically align to the bottom align-middle Vertically align to the middle align-baseline Vertically align to the baseline Clearfix clearfix Clear a floating element Colour Note The colour helpers are created from the colours defined within the variables. By adding more, these will also be created as helpers. The below are just a selection: white black primary secondary You can also get a colour by using the provided function. See the colours section for more details. b-white Sets the background color to white b-black Sets the background color to black b-primary Sets the background color to primary b-secondary Sets the background color to secondary c-white Sets the text color to white c-black Sets the text color to black c-primary Sets the text color to primary c-secondary Sets the text color to secondary Cursor disabled Show the not-allowed cursor move Show the move cursor pointer Show the pointer cursor Display d-block Display as a block element d-hidden Display as a hidden element, includes [x-cloak] for alpine.js d-flex Display as a flex element d-grid Display as a grid element d-inline Display as an inline element d-inline-block Display as an inline block element d-inline-flex Display as an inline flex element d-table Display as a table element d-table-cell Display as a table-cell element Flex Note Use all the below with d-flex on the container of the items to be flexed. A good resource on flex can be found at css-tricks.com . flex-row Sets the direction to row flex-column Sets the direction to column flex-row-reverse Sets the direction to row reverse flex-column-reverse Sets the direction to column reverse justify-content-start Justify child items to start justify-content-end Justify child items to end justify-content-center Justify child items to center justify-content-between Justify child items to between justify-content-around Justify child items to end align-items-start Align child items to start align-items-end Align child items to end align-items-center Align child items to center align-items-basline Align child items to basline align-items-stretch Align child items to stretch flex-nowrap Single-line which may cause the container to overflow flex-wrap Multi-lines, direction is defined by flex-direction flex-wrap-reverse Multi-lines, opposite to direction defined by flex-direction Float pull-left Float an element to the left pull-right Float an element to the right Image img-fluid Make an image responsive and use the full width but no more Lists list-style-none Remove bullets from lists ul and ol list-style-reset Remove list style, padding and margin from lists ul and ol Overflow noscroll Sets overflow to hidden scroll-x Allow scrolling horizontally when required Position fixed Sets position to fixed relative Sets position to relative absolute Sets position to absolute Print no-print Hides this element when printing Sizing full-height Sets the height to 100% full-visual-height Sets the height to 100% if the visual height full-width Sets the width to 100% max-full-width Sets the maximum width to 100% Spacing margin-zero Sets margin to zero m-auto Sets margin to auto mt-auto Sets margin top to auto mr-auto Sets margin right to auto mb-auto Sets margin bottom to auto ml-auto Sets margin left to auto push-auto Sets margin left and right to auto Text text-left Sets text alignment to left text-right Sets text alignment to right text-center Sets text alignment to center text-just Sets text alignment to justify strong Sets font weight as $strong-font-weight lead Sets font weight to $lead-font-weight muted Sets the opacity as $muted-opacity nowrap Stops the text from wrapping small Sets the font size to $small-font-size uppercase Makes the text uppercase text-shadow Applies a shadow to the text Transform flip-x Flips an element on its horizontal axis flip-y Flips an element on its vertical axis flip-both Flips an element on both axis Transition preload-transitions Sets all transitions to none, tipically used during page loads then removed when loaded to stop a flickering effect. See usage below. < body class = \"preload-transitions\" > <!-- place at end of body --> < script type = \"text/javascript\" > document . addEventListener ( \"DOMContentLoaded\" , function (){ let node = document . querySelector ( \".preload-transitions\" ); node . classList . remove ( \"preload-transitions\" ); }); </ script > </ body > Visibility Note The below depends on the configured grid breakpoints xs , sm , md , lg , xl For more details on breakpoints see the grid section. hidden-xs Hide this element on the xs breakpoint only hidden-sm Hide this element on the sm breakpoint only hidden-md Hide this element on the md breakpoint only hidden-lg Hide this element on the lg breakpoint only hidden-xl Hide this element on the xl breakpoint only hidden-xs-down Hide this element on the xs breakpoint and lower hidden-sm-down Hide this element on the sm breakpoint and lower hidden-md-down Hide this element on the md breakpoint and lower hidden-lg-down Hide this element on the lg breakpoint and lower hidden-xl-down Hide this element on the xl breakpoint and lower hidden-xs-up Hide this element on the xs breakpoint and higher hidden-sm-up Hide this element on the sm breakpoint and higher hidden-md-up Hide this element on the md breakpoint and higher hidden-lg-up Hide this element on the lg breakpoint and higher hidden-xl-up Hide this element on the xl breakpoint and higher","title":"Utility Helpers"},{"location":"utilities/#utility-helpers","text":"Below is a list of all the utilites and their description within Karma CSS.","title":"Utility Helpers"},{"location":"utilities/#alignment","text":"align-top Vertically align to the top align-bottom Vertically align to the bottom align-middle Vertically align to the middle align-baseline Vertically align to the baseline","title":"Alignment"},{"location":"utilities/#clearfix","text":"clearfix Clear a floating element","title":"Clearfix"},{"location":"utilities/#colour","text":"Note The colour helpers are created from the colours defined within the variables. By adding more, these will also be created as helpers. The below are just a selection: white black primary secondary You can also get a colour by using the provided function. See the colours section for more details. b-white Sets the background color to white b-black Sets the background color to black b-primary Sets the background color to primary b-secondary Sets the background color to secondary c-white Sets the text color to white c-black Sets the text color to black c-primary Sets the text color to primary c-secondary Sets the text color to secondary","title":"Colour"},{"location":"utilities/#cursor","text":"disabled Show the not-allowed cursor move Show the move cursor pointer Show the pointer cursor","title":"Cursor"},{"location":"utilities/#display","text":"d-block Display as a block element d-hidden Display as a hidden element, includes [x-cloak] for alpine.js d-flex Display as a flex element d-grid Display as a grid element d-inline Display as an inline element d-inline-block Display as an inline block element d-inline-flex Display as an inline flex element d-table Display as a table element d-table-cell Display as a table-cell element","title":"Display"},{"location":"utilities/#flex","text":"Note Use all the below with d-flex on the container of the items to be flexed. A good resource on flex can be found at css-tricks.com . flex-row Sets the direction to row flex-column Sets the direction to column flex-row-reverse Sets the direction to row reverse flex-column-reverse Sets the direction to column reverse justify-content-start Justify child items to start justify-content-end Justify child items to end justify-content-center Justify child items to center justify-content-between Justify child items to between justify-content-around Justify child items to end align-items-start Align child items to start align-items-end Align child items to end align-items-center Align child items to center align-items-basline Align child items to basline align-items-stretch Align child items to stretch flex-nowrap Single-line which may cause the container to overflow flex-wrap Multi-lines, direction is defined by flex-direction flex-wrap-reverse Multi-lines, opposite to direction defined by flex-direction","title":"Flex"},{"location":"utilities/#float","text":"pull-left Float an element to the left pull-right Float an element to the right","title":"Float"},{"location":"utilities/#image","text":"img-fluid Make an image responsive and use the full width but no more","title":"Image"},{"location":"utilities/#lists","text":"list-style-none Remove bullets from lists ul and ol list-style-reset Remove list style, padding and margin from lists ul and ol","title":"Lists"},{"location":"utilities/#overflow","text":"noscroll Sets overflow to hidden scroll-x Allow scrolling horizontally when required","title":"Overflow"},{"location":"utilities/#position","text":"fixed Sets position to fixed relative Sets position to relative absolute Sets position to absolute","title":"Position"},{"location":"utilities/#print","text":"no-print Hides this element when printing","title":"Print"},{"location":"utilities/#sizing","text":"full-height Sets the height to 100% full-visual-height Sets the height to 100% if the visual height full-width Sets the width to 100% max-full-width Sets the maximum width to 100%","title":"Sizing"},{"location":"utilities/#spacing","text":"margin-zero Sets margin to zero m-auto Sets margin to auto mt-auto Sets margin top to auto mr-auto Sets margin right to auto mb-auto Sets margin bottom to auto ml-auto Sets margin left to auto push-auto Sets margin left and right to auto","title":"Spacing"},{"location":"utilities/#text","text":"text-left Sets text alignment to left text-right Sets text alignment to right text-center Sets text alignment to center text-just Sets text alignment to justify strong Sets font weight as $strong-font-weight lead Sets font weight to $lead-font-weight muted Sets the opacity as $muted-opacity nowrap Stops the text from wrapping small Sets the font size to $small-font-size uppercase Makes the text uppercase text-shadow Applies a shadow to the text","title":"Text"},{"location":"utilities/#transform","text":"flip-x Flips an element on its horizontal axis flip-y Flips an element on its vertical axis flip-both Flips an element on both axis","title":"Transform"},{"location":"utilities/#transition","text":"preload-transitions Sets all transitions to none, tipically used during page loads then removed when loaded to stop a flickering effect. See usage below. < body class = \"preload-transitions\" > <!-- place at end of body --> < script type = \"text/javascript\" > document . addEventListener ( \"DOMContentLoaded\" , function (){ let node = document . querySelector ( \".preload-transitions\" ); node . classList . remove ( \"preload-transitions\" ); }); </ script > </ body >","title":"Transition"},{"location":"utilities/#visibility","text":"Note The below depends on the configured grid breakpoints xs , sm , md , lg , xl For more details on breakpoints see the grid section. hidden-xs Hide this element on the xs breakpoint only hidden-sm Hide this element on the sm breakpoint only hidden-md Hide this element on the md breakpoint only hidden-lg Hide this element on the lg breakpoint only hidden-xl Hide this element on the xl breakpoint only hidden-xs-down Hide this element on the xs breakpoint and lower hidden-sm-down Hide this element on the sm breakpoint and lower hidden-md-down Hide this element on the md breakpoint and lower hidden-lg-down Hide this element on the lg breakpoint and lower hidden-xl-down Hide this element on the xl breakpoint and lower hidden-xs-up Hide this element on the xs breakpoint and higher hidden-sm-up Hide this element on the sm breakpoint and higher hidden-md-up Hide this element on the md breakpoint and higher hidden-lg-up Hide this element on the lg breakpoint and higher hidden-xl-up Hide this element on the xl breakpoint and higher","title":"Visibility"},{"location":"variables/","text":"Variables See below all the current variables and their defaults set in Karma CSS Note Its worth noting that when defining your own colours or buttons you dont need to copy all of them. You can start with an empty list, the existing ones will be merged in with yours. You will be left with your own and any from the defaults you did not define. // start with these $colors: (); $buttons: (); // Variables // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // Options // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // enable all container, row, col, order classes $enable-grid-classes : true !default ; // Typography // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // Base font $base-font-size : 15 px !default ; $base-line-height : 1 .6 !default ; $base-font-weight : 400 !default ; // Font Family $base-font-family : \"Open Sans\" , sans-serif !default ; $header-font-family : $base-font-family !default ; $code-font-family : monospace , monospace !default ; // The font sizes for h1-h6. $h1-font-size : 2 * $base-font-size !default ; $h2-font-size : 1 .5 * $base-font-size !default ; $h3-font-size : 1 .17 * $base-font-size !default ; $h4-font-size : 1 * $base-font-size !default ; $h5-font-size : 0 .83 * $base-font-size !default ; $h6-font-size : 0 .67 * $base-font-size !default ; $heading-font-weight : 400 !default ; $h1-font-weight : $heading-font-weight !default ; $h2-font-weight : $heading-font-weight !default ; $h3-font-weight : $heading-font-weight !default ; $h4-font-weight : $heading-font-weight !default ; $h5-font-weight : $heading-font-weight !default ; $h6-font-weight : $heading-font-weight !default ; $heading-margin : 0 0 1 .5 rem !default ; $h1-margin : $heading-margin !default ; $h2-margin : $heading-margin !default ; $h3-margin : $heading-margin !default ; $h4-margin : $heading-margin !default ; $h5-margin : $heading-margin !default ; $h6-margin : $heading-margin !default ; $h1-line-height : 1 .2 !default ; $h2-line-height : 1 .25 !default ; $h3-line-height : 1 .3 !default ; $h4-line-height : 1 .35 !default ; $h5-line-height : 1 .5 !default ; $h6-line-height : 1 .6 !default ; $strong-font-weight : 700 !default ; $lead-font-weight : 300 !default ; $small-font-size : 80 % !default ; // Grid // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 $grid-breakpoints : ( xs : 0 , sm : 576 px , md : 768 px , lg : 992 px , xl : 1200 px ) !default ; $container-max-widths : ( sm : 540 px , md : 720 px , lg : 960 px , xl : 1140 px ) !default ; $grid-columns : 12 !default ; $grid-gutter-width : 30 px !default ; // Styling // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // colours $colors : () !default ; $colors : map-merge ( ( // required base colours \"white\" : rgb ( 255 , 255 , 255 ) , \"black\" : rgb ( 17 , 17 , 17 ) , \"primary\" : rgb ( 51 , 195 , 240 ) , \"secondary\" : rgb ( 240 , 240 , 240 ) , // Cool \"aqua\" : rgb ( 127 , 219 , 255 ) , \"blue\" : rgb ( 0 , 116 , 217 ) , \"navy\" : rgb ( 0 , 31 , 63 ) , \"teal\" : rgb ( 57 , 204 , 204 ) , \"green\" : rgb ( 46 , 204 , 64 ) , \"olive\" : rgb ( 61 , 153 , 112 ) , \"lime\" : rgb ( 1 , 255 , 112 ) , // Warm \"yellow\" : rgb ( 255 , 220 , 0 ) , \"orange\" : rgb ( 255 , 133 , 27 ) , \"red\" : rgb ( 255 , 65 , 54 ) , \"fuchsia\" : rgb ( 240 , 18 , 190 ) , \"purple\" : rgb ( 177 , 13 , 201 ) , \"maroon\" : rgb ( 133 , 20 , 75 ) , // Other Greyscale \"silver\" : rgb ( 221 , 221 , 221 ) , \"gray\" : rgb ( 170 , 170 , 170 ) , // Social media, more can be found at https://www.materialui.co/socialcolors \"facebook\" : rgb ( 59 , 89 , 153 ) , \"twitter\" : rgb ( 85 , 172 , 238 ) , \"linkedin\" : rgb ( 0 , 119 , 181 ) , \"googleplus\" : rgb ( 221 , 75 , 57 ) , \"instagram\" : rgb ( 228 , 64 , 95 ) , \"pinterest\" : rgb ( 189 , 8 , 28 ) ) , $colors ); // defined colors $body-background : rgb ( 255 , 255 , 255 ) !default ; $font-color : rgb ( 62 , 62 , 62 ) !default ; $header-font-color : $font-color !default ; // borders $border-width : 1 px !default ; $border-color : rgb ( 230 , 230 , 230 ) !default ; // animation $animation-speed-slow : 0 .5 s !default ; $animation-speed-fast : 0 .18 s !default ; // misc $generic-margin-bottom : 1 .5 rem !default ; // used as a starting point for other variables $global-radius : 0 .25 rem !default ; $darken-hover-percent : 10 % !default ; // used within hovers in links and buttons $muted-opacity : 0 .7 !default ; // opacity thats set in the .muted helper class // paragraph $paragraph-margin-bottom : $generic-margin-bottom !default ; // image $figure-margin-bottom : $generic-margin-bottom !default ; // links $link-color : map-get ( $colors , \"primary\" ) !default ; $link-color-hover : darken ( $link-color , $darken-hover-percent ) !default ; $link-decoration : none !default ; $link-decoration-hover : none !default ; $link-transition : color linear $animation-speed-fast !default ; // lists $ul-list-padding-left : 0 !default ; $ul-list-style : circle inside !default ; $ul-list-margin-bottom : $generic-margin-bottom !default ; $ul-list-nested-margin : 0 0 0 2 rem !default ; $ol-list-padding-left : 0 !default ; $ol-list-style : decimal inside !default ; $ol-list-margin-bottom : $generic-margin-bottom !default ; $ol-list-nested-margin : 0 0 0 2 rem !default ; $dl-margin-bottom : $generic-margin-bottom !default ; $dt-margin : 0 0 0 0 !default ; $dd-margin : 0 0 $generic-margin-bottom 2 rem !default ; // buttons $buttons : () !default ; $buttons : map-merge ( ( // name color font-color primary : map-get ( $colors , \"primary\" ) map-get ( $colors , \"white\" ) , secondary : map-get ( $colors , \"secondary\" ) map-get ( $colors , \"black\" ) ) , $buttons ); $button-border-width : $border-width !default ; $button-border-radius : $global-radius !default ; $button-font-size : 1 .5 rem !default ; $button-font-weight : 400 !default ; $button-line-height : 1 .5 !default ; $button-padding-y : 0 .8 rem !default ; $button-padding-x : 1 rem !default ; $button-transition : background-color linear $animation-speed-fast , border-color linear $animation-speed-fast !default ; // the below applies to the default button class only `.button` $button-default-border-color : $border-color !default ; $button-default-bg-color : map-get ( $colors , \"white\" ) !default ; $button-default-font-color : $font-color !default ; // forms $form-margin-bottom : $generic-margin-bottom !default ; $input-use-full-width : false !default ; // false = max-width:100%, true = width:100% $input-background : rgb ( 255 , 255 , 255 ) !default ; $input-border-radius : $global-radius !default ; $input-border-width : $border-width !default ; $input-border-color : $border-color !default ; $input-font-size : 1 .5 rem !default ; $input-font-weight : $base-font-weight !default ; $input-font-color : $font-color !default ; $input-line-height : 1 .5 !default ; $input-padding-y : 0 .8 rem !default ; $input-padding-x : 1 rem !default ; $input-placeholder-color : rgb ( 185 , 185 , 185 ) !default ; $input-margin-bottom : 1 .5 rem !default ; $input-transition : background linear $animation-speed-fast , border-color linear $animation-speed-fast !default ; $input-background-focus : $input-background !default ; $input-border-color-focus : map-get ( $colors , primary ) !default ; // these should not need changing, they are used to force selects to the same height as inputs $input-height-border : $input-border-width * 2 !default ; $input-height-inner : ( $input-padding-y * 2 ) + ( $input-font-size * $input-line-height ) !default ; $input-height : calc ( #{ $input-height-inner } + #{ $input-height-border } ) !default ; // labels $label-font-weight : 600 !default ; // tables $table-margin-bottom : $generic-margin-bottom !default ; $table-background-color : transparent !default ; $table-border-width : $border-width !default ; $table-border-color : $border-color !default ; $table-cell-padding : 0 .85 rem 0 .85 rem !default ; $table-font-size : 90 % !default ; $table-headed-color : rgb ( 240 , 240 , 240 ) !default ; $table-hover-color : rgb ( 245 , 245 , 245 ) !default ; $table-striped-color : rgb ( 250 , 250 , 250 ) !default ; // code $code-border-width : $border-width !default ; $code-border-color : $border-color !default ; $code-border-radius : $global-radius !default ; $code-background : rgb ( 240 , 240 , 240 ) !default ; $code-font-color : $font-color !default ; $code-font-size : 100 % !default ; $code-padding : 0 .2 rem 0 .5 rem !default ; // preformatted block $pre-font-size : 90 % !default ; $pre-padding : 1 rem 1 .5 rem !default ; $pre-margin-bottom : $generic-margin-bottom !default ; // blockquote $blockquote-padding-x : 1 .5 rem !default ; $blockquote-padding-y : 1 rem !default ; $blockquote-border-left-width : 3 px !default ; $blockquote-border-left-color : $border-color !default ; $blockquote-margin-bottom : $generic-margin-bottom !default ; // hr $hr-border-width : $border-width !default ; $hr-border-color : $border-color !default ; $hr-margin : 1 .5 rem 0 !default ; // defined z-indexes and get with zindex('default') $z-layers : ( \"default\" : 1 ) !default ;","title":"Variables"},{"location":"variables/#variables","text":"See below all the current variables and their defaults set in Karma CSS Note Its worth noting that when defining your own colours or buttons you dont need to copy all of them. You can start with an empty list, the existing ones will be merged in with yours. You will be left with your own and any from the defaults you did not define. // start with these $colors: (); $buttons: (); // Variables // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // Options // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // enable all container, row, col, order classes $enable-grid-classes : true !default ; // Typography // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // Base font $base-font-size : 15 px !default ; $base-line-height : 1 .6 !default ; $base-font-weight : 400 !default ; // Font Family $base-font-family : \"Open Sans\" , sans-serif !default ; $header-font-family : $base-font-family !default ; $code-font-family : monospace , monospace !default ; // The font sizes for h1-h6. $h1-font-size : 2 * $base-font-size !default ; $h2-font-size : 1 .5 * $base-font-size !default ; $h3-font-size : 1 .17 * $base-font-size !default ; $h4-font-size : 1 * $base-font-size !default ; $h5-font-size : 0 .83 * $base-font-size !default ; $h6-font-size : 0 .67 * $base-font-size !default ; $heading-font-weight : 400 !default ; $h1-font-weight : $heading-font-weight !default ; $h2-font-weight : $heading-font-weight !default ; $h3-font-weight : $heading-font-weight !default ; $h4-font-weight : $heading-font-weight !default ; $h5-font-weight : $heading-font-weight !default ; $h6-font-weight : $heading-font-weight !default ; $heading-margin : 0 0 1 .5 rem !default ; $h1-margin : $heading-margin !default ; $h2-margin : $heading-margin !default ; $h3-margin : $heading-margin !default ; $h4-margin : $heading-margin !default ; $h5-margin : $heading-margin !default ; $h6-margin : $heading-margin !default ; $h1-line-height : 1 .2 !default ; $h2-line-height : 1 .25 !default ; $h3-line-height : 1 .3 !default ; $h4-line-height : 1 .35 !default ; $h5-line-height : 1 .5 !default ; $h6-line-height : 1 .6 !default ; $strong-font-weight : 700 !default ; $lead-font-weight : 300 !default ; $small-font-size : 80 % !default ; // Grid // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 $grid-breakpoints : ( xs : 0 , sm : 576 px , md : 768 px , lg : 992 px , xl : 1200 px ) !default ; $container-max-widths : ( sm : 540 px , md : 720 px , lg : 960 px , xl : 1140 px ) !default ; $grid-columns : 12 !default ; $grid-gutter-width : 30 px !default ; // Styling // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // colours $colors : () !default ; $colors : map-merge ( ( // required base colours \"white\" : rgb ( 255 , 255 , 255 ) , \"black\" : rgb ( 17 , 17 , 17 ) , \"primary\" : rgb ( 51 , 195 , 240 ) , \"secondary\" : rgb ( 240 , 240 , 240 ) , // Cool \"aqua\" : rgb ( 127 , 219 , 255 ) , \"blue\" : rgb ( 0 , 116 , 217 ) , \"navy\" : rgb ( 0 , 31 , 63 ) , \"teal\" : rgb ( 57 , 204 , 204 ) , \"green\" : rgb ( 46 , 204 , 64 ) , \"olive\" : rgb ( 61 , 153 , 112 ) , \"lime\" : rgb ( 1 , 255 , 112 ) , // Warm \"yellow\" : rgb ( 255 , 220 , 0 ) , \"orange\" : rgb ( 255 , 133 , 27 ) , \"red\" : rgb ( 255 , 65 , 54 ) , \"fuchsia\" : rgb ( 240 , 18 , 190 ) , \"purple\" : rgb ( 177 , 13 , 201 ) , \"maroon\" : rgb ( 133 , 20 , 75 ) , // Other Greyscale \"silver\" : rgb ( 221 , 221 , 221 ) , \"gray\" : rgb ( 170 , 170 , 170 ) , // Social media, more can be found at https://www.materialui.co/socialcolors \"facebook\" : rgb ( 59 , 89 , 153 ) , \"twitter\" : rgb ( 85 , 172 , 238 ) , \"linkedin\" : rgb ( 0 , 119 , 181 ) , \"googleplus\" : rgb ( 221 , 75 , 57 ) , \"instagram\" : rgb ( 228 , 64 , 95 ) , \"pinterest\" : rgb ( 189 , 8 , 28 ) ) , $colors ); // defined colors $body-background : rgb ( 255 , 255 , 255 ) !default ; $font-color : rgb ( 62 , 62 , 62 ) !default ; $header-font-color : $font-color !default ; // borders $border-width : 1 px !default ; $border-color : rgb ( 230 , 230 , 230 ) !default ; // animation $animation-speed-slow : 0 .5 s !default ; $animation-speed-fast : 0 .18 s !default ; // misc $generic-margin-bottom : 1 .5 rem !default ; // used as a starting point for other variables $global-radius : 0 .25 rem !default ; $darken-hover-percent : 10 % !default ; // used within hovers in links and buttons $muted-opacity : 0 .7 !default ; // opacity thats set in the .muted helper class // paragraph $paragraph-margin-bottom : $generic-margin-bottom !default ; // image $figure-margin-bottom : $generic-margin-bottom !default ; // links $link-color : map-get ( $colors , \"primary\" ) !default ; $link-color-hover : darken ( $link-color , $darken-hover-percent ) !default ; $link-decoration : none !default ; $link-decoration-hover : none !default ; $link-transition : color linear $animation-speed-fast !default ; // lists $ul-list-padding-left : 0 !default ; $ul-list-style : circle inside !default ; $ul-list-margin-bottom : $generic-margin-bottom !default ; $ul-list-nested-margin : 0 0 0 2 rem !default ; $ol-list-padding-left : 0 !default ; $ol-list-style : decimal inside !default ; $ol-list-margin-bottom : $generic-margin-bottom !default ; $ol-list-nested-margin : 0 0 0 2 rem !default ; $dl-margin-bottom : $generic-margin-bottom !default ; $dt-margin : 0 0 0 0 !default ; $dd-margin : 0 0 $generic-margin-bottom 2 rem !default ; // buttons $buttons : () !default ; $buttons : map-merge ( ( // name color font-color primary : map-get ( $colors , \"primary\" ) map-get ( $colors , \"white\" ) , secondary : map-get ( $colors , \"secondary\" ) map-get ( $colors , \"black\" ) ) , $buttons ); $button-border-width : $border-width !default ; $button-border-radius : $global-radius !default ; $button-font-size : 1 .5 rem !default ; $button-font-weight : 400 !default ; $button-line-height : 1 .5 !default ; $button-padding-y : 0 .8 rem !default ; $button-padding-x : 1 rem !default ; $button-transition : background-color linear $animation-speed-fast , border-color linear $animation-speed-fast !default ; // the below applies to the default button class only `.button` $button-default-border-color : $border-color !default ; $button-default-bg-color : map-get ( $colors , \"white\" ) !default ; $button-default-font-color : $font-color !default ; // forms $form-margin-bottom : $generic-margin-bottom !default ; $input-use-full-width : false !default ; // false = max-width:100%, true = width:100% $input-background : rgb ( 255 , 255 , 255 ) !default ; $input-border-radius : $global-radius !default ; $input-border-width : $border-width !default ; $input-border-color : $border-color !default ; $input-font-size : 1 .5 rem !default ; $input-font-weight : $base-font-weight !default ; $input-font-color : $font-color !default ; $input-line-height : 1 .5 !default ; $input-padding-y : 0 .8 rem !default ; $input-padding-x : 1 rem !default ; $input-placeholder-color : rgb ( 185 , 185 , 185 ) !default ; $input-margin-bottom : 1 .5 rem !default ; $input-transition : background linear $animation-speed-fast , border-color linear $animation-speed-fast !default ; $input-background-focus : $input-background !default ; $input-border-color-focus : map-get ( $colors , primary ) !default ; // these should not need changing, they are used to force selects to the same height as inputs $input-height-border : $input-border-width * 2 !default ; $input-height-inner : ( $input-padding-y * 2 ) + ( $input-font-size * $input-line-height ) !default ; $input-height : calc ( #{ $input-height-inner } + #{ $input-height-border } ) !default ; // labels $label-font-weight : 600 !default ; // tables $table-margin-bottom : $generic-margin-bottom !default ; $table-background-color : transparent !default ; $table-border-width : $border-width !default ; $table-border-color : $border-color !default ; $table-cell-padding : 0 .85 rem 0 .85 rem !default ; $table-font-size : 90 % !default ; $table-headed-color : rgb ( 240 , 240 , 240 ) !default ; $table-hover-color : rgb ( 245 , 245 , 245 ) !default ; $table-striped-color : rgb ( 250 , 250 , 250 ) !default ; // code $code-border-width : $border-width !default ; $code-border-color : $border-color !default ; $code-border-radius : $global-radius !default ; $code-background : rgb ( 240 , 240 , 240 ) !default ; $code-font-color : $font-color !default ; $code-font-size : 100 % !default ; $code-padding : 0 .2 rem 0 .5 rem !default ; // preformatted block $pre-font-size : 90 % !default ; $pre-padding : 1 rem 1 .5 rem !default ; $pre-margin-bottom : $generic-margin-bottom !default ; // blockquote $blockquote-padding-x : 1 .5 rem !default ; $blockquote-padding-y : 1 rem !default ; $blockquote-border-left-width : 3 px !default ; $blockquote-border-left-color : $border-color !default ; $blockquote-margin-bottom : $generic-margin-bottom !default ; // hr $hr-border-width : $border-width !default ; $hr-border-color : $border-color !default ; $hr-margin : 1 .5 rem 0 !default ; // defined z-indexes and get with zindex('default') $z-layers : ( \"default\" : 1 ) !default ;","title":"Variables"},{"location":"components/","text":"Getting Started All components and their default styles have been built into a single css file. So if you do not want the scss included in your project or dont need to adjust any of the default variables you can link the css directly in. < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/karma-css@latest/dist/karma-components.min.css\" > Building from Source After following the customisation guide you can include the components after the core import from karma. /* ensure you import your own variables here before ours */ @import \"variables\" ; /* karma core files */ @import \"node_modules/karma-css/scss/variables\" ; @import \"node_modules/karma-css/scss/import\" ; /* karma components */ @import \"node_modules/karma-css/scss/components/alert\" ; @import \"node_modules/karma-css/scss/components/button-group\" ; @import \"node_modules/karma-css/scss/components/icon-input\" ; @import \"node_modules/karma-css/scss/components/input-group\" ; @import \"node_modules/karma-css/scss/components/message\" ; @import \"node_modules/karma-css/scss/components/tooltip\" ; /* add your custom modules here */ /* karma utility helpers - probably best at the end of the stylesheet */ @import \"node_modules/karma-css/scss/utilities\" ;","title":"Getting Started"},{"location":"components/#getting-started","text":"All components and their default styles have been built into a single css file. So if you do not want the scss included in your project or dont need to adjust any of the default variables you can link the css directly in. < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/karma-css@latest/dist/karma-components.min.css\" >","title":"Getting Started"},{"location":"components/#building-from-source","text":"After following the customisation guide you can include the components after the core import from karma. /* ensure you import your own variables here before ours */ @import \"variables\" ; /* karma core files */ @import \"node_modules/karma-css/scss/variables\" ; @import \"node_modules/karma-css/scss/import\" ; /* karma components */ @import \"node_modules/karma-css/scss/components/alert\" ; @import \"node_modules/karma-css/scss/components/button-group\" ; @import \"node_modules/karma-css/scss/components/icon-input\" ; @import \"node_modules/karma-css/scss/components/input-group\" ; @import \"node_modules/karma-css/scss/components/message\" ; @import \"node_modules/karma-css/scss/components/tooltip\" ; /* add your custom modules here */ /* karma utility helpers - probably best at the end of the stylesheet */ @import \"node_modules/karma-css/scss/utilities\" ;","title":"Building from Source"},{"location":"components/alert/","text":"Alerts Alert styles. Example Variables Below are the default variables, adjust any of these before you import the component. $alert-border-darken-percent : 10 % !default ; $alert-margin-bottom : $generic-margin-bottom !default ; $alert-padding : 1 .5 rem 2 rem !default ; $alerts : ( // name background font-color success : color-lighten ( \"green\" , 35 % ) $font-color , danger : color-lighten ( \"red\" , 30 % ) $font-color , warning : color-lighten ( \"yellow\" , 35 % ) $font-color , info : color-lighten ( \"aqua\" , 15 % ) $font-color ) !default ;","title":"Alerts"},{"location":"components/alert/#alerts","text":"Alert styles.","title":"Alerts"},{"location":"components/alert/#example","text":"","title":"Example"},{"location":"components/alert/#variables","text":"Below are the default variables, adjust any of these before you import the component. $alert-border-darken-percent : 10 % !default ; $alert-margin-bottom : $generic-margin-bottom !default ; $alert-padding : 1 .5 rem 2 rem !default ; $alerts : ( // name background font-color success : color-lighten ( \"green\" , 35 % ) $font-color , danger : color-lighten ( \"red\" , 30 % ) $font-color , warning : color-lighten ( \"yellow\" , 35 % ) $font-color , info : color-lighten ( \"aqua\" , 15 % ) $font-color ) !default ;","title":"Variables"},{"location":"components/button-group/","text":"Button Groups Useful for displaying several buttons together. Example Variables Below are the default variables, adjust any of these before you import the component. $button-group-collapse-borders : false !default ;","title":"Button groups"},{"location":"components/button-group/#button-groups","text":"Useful for displaying several buttons together.","title":"Button Groups"},{"location":"components/button-group/#example","text":"","title":"Example"},{"location":"components/button-group/#variables","text":"Below are the default variables, adjust any of these before you import the component. $button-group-collapse-borders : false !default ;","title":"Variables"},{"location":"components/icon-input/","text":"Icon Inputs Attach an icon into an input. Example Variables Below are the default variables, adjust any of these before you import the component. $icon-input-icon-class-prefix : 'fa-' !default ; $icon-input-icon-width : 2 .65 em !default ; $icon-input-margin-bottom : $input-margin-bottom !default ;","title":"Icon inputs"},{"location":"components/icon-input/#icon-inputs","text":"Attach an icon into an input.","title":"Icon Inputs"},{"location":"components/icon-input/#example","text":"","title":"Example"},{"location":"components/icon-input/#variables","text":"Below are the default variables, adjust any of these before you import the component. $icon-input-icon-class-prefix : 'fa-' !default ; $icon-input-icon-width : 2 .65 em !default ; $icon-input-margin-bottom : $input-margin-bottom !default ;","title":"Variables"},{"location":"components/input-group/","text":"Input Groups Join text, buttons together with inputs or event several inputs as a single block. Examples Basic With Buttons Multiple Inputs Icon Inputs Variables Below are the default variables, adjust any of these before you import the component. $input-group-addon-padding-x : $input-padding-x !default ; $input-group-margin-bottom : $input-margin-bottom !default ;","title":"Input groups"},{"location":"components/input-group/#input-groups","text":"Join text, buttons together with inputs or event several inputs as a single block.","title":"Input Groups"},{"location":"components/input-group/#examples","text":"","title":"Examples"},{"location":"components/input-group/#basic","text":"","title":"Basic"},{"location":"components/input-group/#with-buttons","text":"","title":"With Buttons"},{"location":"components/input-group/#multiple-inputs","text":"","title":"Multiple Inputs"},{"location":"components/input-group/#icon-inputs","text":"","title":"Icon Inputs"},{"location":"components/input-group/#variables","text":"Below are the default variables, adjust any of these before you import the component. $input-group-addon-padding-x : $input-padding-x !default ; $input-group-margin-bottom : $input-margin-bottom !default ;","title":"Variables"},{"location":"components/message/","text":"Messages Show a toast like message. Example Animation The below uses Alpine.js to control the showing and hiding of the message. Variables Below are the default variables, adjust any of these before you import the component. $messages : ( // name background font-color success : color ( \"green\" ) color ( \"white\" ) , danger : color ( \"red\" ) color ( \"white\" ) , warning : color ( \"yellow\" ) $font-color , info : color ( \"aqua\" ) $font-color ) !default ; // either topleft, topright, bottomleft, bottomright $messages-position : bottomright !default ; $message-border-radius : $global-radius !default ; $message-margin-bottom : 1 rem !default ; $message-padding : 1 rem 1 .5 rem !default ;","title":"Messages"},{"location":"components/message/#messages","text":"Show a toast like message.","title":"Messages"},{"location":"components/message/#example","text":"","title":"Example"},{"location":"components/message/#animation","text":"The below uses Alpine.js to control the showing and hiding of the message.","title":"Animation"},{"location":"components/message/#variables","text":"Below are the default variables, adjust any of these before you import the component. $messages : ( // name background font-color success : color ( \"green\" ) color ( \"white\" ) , danger : color ( \"red\" ) color ( \"white\" ) , warning : color ( \"yellow\" ) $font-color , info : color ( \"aqua\" ) $font-color ) !default ; // either topleft, topright, bottomleft, bottomright $messages-position : bottomright !default ; $message-border-radius : $global-radius !default ; $message-margin-bottom : 1 rem !default ; $message-padding : 1 rem 1 .5 rem !default ;","title":"Variables"},{"location":"components/tooltip/","text":"Tooltips Tooltip helper. These are pseudo based so they only work on elements that can have content. Example Variables Below are the default variables, adjust any of these before you import the component. $tooltip-background : color ( \"black\" ) !default ; $tooltip-text-color : color ( \"white\" ) !default ; $tooltip-font-size : 90 % !default ; $tooltip-padding : 0 .5 rem 1 rem !default ; $tooltip-arrow-height : 6 px !default ; $tooltip-border-radius : $global-radius !default ; $tooltip-transition : opacity $animation-speed-fast ease-in-out !default ;","title":"Tooltips"},{"location":"components/tooltip/#tooltips","text":"Tooltip helper. These are pseudo based so they only work on elements that can have content.","title":"Tooltips"},{"location":"components/tooltip/#example","text":"","title":"Example"},{"location":"components/tooltip/#variables","text":"Below are the default variables, adjust any of these before you import the component. $tooltip-background : color ( \"black\" ) !default ; $tooltip-text-color : color ( \"white\" ) !default ; $tooltip-font-size : 90 % !default ; $tooltip-padding : 0 .5 rem 1 rem !default ; $tooltip-arrow-height : 6 px !default ; $tooltip-border-radius : $global-radius !default ; $tooltip-transition : opacity $animation-speed-fast ease-in-out !default ;","title":"Variables"},{"location":"mixins/box-shadow/","text":"Box Shadow // Box Shadow // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // Adds a simple box shadow to an element // // Usage: // @include box-shadow(3px, 3px, 10px, rgba(0, 0, 0, .54)); // or to inset: // @include box-shadow(3px, 3px, 10px, rgba(0, 0, 0, .54), true); // @mixin box-shadow ( $left , $top , $blur , $color , $inset : false ) { @if $inset { box-shadow : inset $ left $ top $ blur $ color ; } @else { box-shadow : $ left $ top $ blur $ color ; } }","title":"Box Shadow"},{"location":"mixins/box-shadow/#box-shadow","text":"// Box Shadow // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // Adds a simple box shadow to an element // // Usage: // @include box-shadow(3px, 3px, 10px, rgba(0, 0, 0, .54)); // or to inset: // @include box-shadow(3px, 3px, 10px, rgba(0, 0, 0, .54), true); // @mixin box-shadow ( $left , $top , $blur , $color , $inset : false ) { @if $inset { box-shadow : inset $ left $ top $ blur $ color ; } @else { box-shadow : $ left $ top $ blur $ color ; } }","title":"Box Shadow"},{"location":"mixins/button/","text":"Button // Button // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // mixins to create buttons // create a basic button // // Usage: // @include button; // @mixin button { display : inline-block ; box-sizing : border-box ; padding : $ button-padding-y $ button-padding-x ; overflow : visible ; color : $ button-default-font-color ; font-weight : $ button-font-weight ; font-size : $ button-font-size ; font-family : inherit ; line-height : $ button-line-height ; white-space : nowrap ; text-align : center ; text-decoration : none ; background-color : $ button-default-bg-color ; border : $ button-border-width solid $ button-default-border-color ; border-radius : $ button-border-radius ; cursor : pointer ; transition : $ button-transition ; user-select : none ; } // button styles required to create a colored variation // // Usage: // @include button-color-variation(color(\"white\"), color(\"black\"), color(\"secondary\")); // @mixin button-color-variation ( $color , $background-color , $border-color ) { color : $ color ; background-color : $ background-color ; border-color : $ border-color ; } // button hover and focus state // // Usage: // @include button-hover(color(\"white\"), color(\"black\"), color(\"secondary\")); // @mixin button-hover ( $color , $background-color , $border-color ) { & :hover , & :focus { color : $ color ; background-color : $ background-color ; border-color : $ border-color ; outline : 0 ; } } // button size variation // // Usage: // @include button-size(1rem, 1rem, 15px); // @mixin button-size ( $padding-y : $button-padding-y , $padding-x : $button-padding-x , $font-size : $button-font-size ) { padding : $ padding-y $ padding-x ; font-size : $ font-size ; }","title":"Button"},{"location":"mixins/button/#button","text":"// Button // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // mixins to create buttons // create a basic button // // Usage: // @include button; // @mixin button { display : inline-block ; box-sizing : border-box ; padding : $ button-padding-y $ button-padding-x ; overflow : visible ; color : $ button-default-font-color ; font-weight : $ button-font-weight ; font-size : $ button-font-size ; font-family : inherit ; line-height : $ button-line-height ; white-space : nowrap ; text-align : center ; text-decoration : none ; background-color : $ button-default-bg-color ; border : $ button-border-width solid $ button-default-border-color ; border-radius : $ button-border-radius ; cursor : pointer ; transition : $ button-transition ; user-select : none ; } // button styles required to create a colored variation // // Usage: // @include button-color-variation(color(\"white\"), color(\"black\"), color(\"secondary\")); // @mixin button-color-variation ( $color , $background-color , $border-color ) { color : $ color ; background-color : $ background-color ; border-color : $ border-color ; } // button hover and focus state // // Usage: // @include button-hover(color(\"white\"), color(\"black\"), color(\"secondary\")); // @mixin button-hover ( $color , $background-color , $border-color ) { & :hover , & :focus { color : $ color ; background-color : $ background-color ; border-color : $ border-color ; outline : 0 ; } } // button size variation // // Usage: // @include button-size(1rem, 1rem, 15px); // @mixin button-size ( $padding-y : $button-padding-y , $padding-x : $button-padding-x , $font-size : $button-font-size ) { padding : $ padding-y $ padding-x ; font-size : $ font-size ; }","title":"Button"},{"location":"mixins/centerer/","text":"Centerer // Centerer // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // position an element centrally // ensure parent element has position: relative; // // Usage: // absolute centre: // @include centerer(true, true); // horzontal only: // @include centerer(true, false); // vertical only: // @include centerer(false, true); // @mixin centerer ( $horizontal : true , $vertical : true , $position : absolute ) { position : $ position ; @ if ( $ horizontal and $ vertical ) { top : 50 % ; left : 50 % ; transform : translate ( -50 % , -50 % ); } @else if ( $ horizontal ) { left : 50 % ; transform : translate ( -50 % , 0 ); } @else if ( $ vertical ) { top : 50 % ; transform : translate ( 0 , -50 % ); } }","title":"Centerer"},{"location":"mixins/centerer/#centerer","text":"// Centerer // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // position an element centrally // ensure parent element has position: relative; // // Usage: // absolute centre: // @include centerer(true, true); // horzontal only: // @include centerer(true, false); // vertical only: // @include centerer(false, true); // @mixin centerer ( $horizontal : true , $vertical : true , $position : absolute ) { position : $ position ; @ if ( $ horizontal and $ vertical ) { top : 50 % ; left : 50 % ; transform : translate ( -50 % , -50 % ); } @else if ( $ horizontal ) { left : 50 % ; transform : translate ( -50 % , 0 ); } @else if ( $ vertical ) { top : 50 % ; transform : translate ( 0 , -50 % ); } }","title":"Centerer"},{"location":"mixins/clearfix/","text":"Clearfix // Clearfix // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // used to clear a floating element // // Usage: // @include clearfix; // @mixin clearfix { & ::after { display : block ; clear : both ; content : \"\" ; } }","title":"Clearfix"},{"location":"mixins/clearfix/#clearfix","text":"// Clearfix // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // used to clear a floating element // // Usage: // @include clearfix; // @mixin clearfix { & ::after { display : block ; clear : both ; content : \"\" ; } }","title":"Clearfix"},{"location":"mixins/content-column/","text":"Content Column // Content Column // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // allowing for content to be spread evenly between specified number of columns // be sure to allow for the content travel from the bottom of one column // to the top of the next without scrolling in your designs // // Usage: // To spread the content across 2 columns with a gap of 3rem: // @include col-overflow(2, 3rem); // @mixin col-overflow ( $col : 2 , $gap : 2 rem ) { column-count : $ col ; column-gap : $ gap ; }","title":"Content Column"},{"location":"mixins/content-column/#content-column","text":"// Content Column // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // allowing for content to be spread evenly between specified number of columns // be sure to allow for the content travel from the bottom of one column // to the top of the next without scrolling in your designs // // Usage: // To spread the content across 2 columns with a gap of 3rem: // @include col-overflow(2, 3rem); // @mixin col-overflow ( $col : 2 , $gap : 2 rem ) { column-count : $ col ; column-gap : $ gap ; }","title":"Content Column"},{"location":"mixins/flip/","text":"Flip // Flip // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // flip an element on its axis // // Usage: // horizontally only: // @include flip(true, false); // vertically only: // @include flip(false, true); // horizontally and vertically: // @include flip(true, true); // @mixin flip ( $x : false , $y : false ) { $scaleX : 1 ; $scaleY : 1 ; @if $x { $scaleX : -1 ; } @if $y { $scaleY : -1 ; } transform : scale ( $ scaleX , $ scaleY ); }","title":"Flip"},{"location":"mixins/flip/#flip","text":"// Flip // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // flip an element on its axis // // Usage: // horizontally only: // @include flip(true, false); // vertically only: // @include flip(false, true); // horizontally and vertically: // @include flip(true, true); // @mixin flip ( $x : false , $y : false ) { $scaleX : 1 ; $scaleY : 1 ; @if $x { $scaleX : -1 ; } @if $y { $scaleY : -1 ; } transform : scale ( $ scaleX , $ scaleY ); }","title":"Flip"},{"location":"mixins/grid/","text":"Grid /// Grid // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // The main mixins used to create the grid containers, rows and columns // used in .container and .container-fluid // @mixin make-container () { width : 100 % ; margin-right : auto ; margin-left : auto ; padding-right : ( $ grid-gutter-width / 2 ); padding-left : ( $ grid-gutter-width / 2 ); } // For each breakpoint, define the maximum width of the container // @mixin make-container-max-widths ( $max-widths : $container-max-widths , $breakpoints : $grid-breakpoints ) { @each $ breakpoint , $ container-max-width in $ max-widths { @include media-breakpoint-up ( $breakpoint , $breakpoints ) { max-width : $ container-max-width ; } } } // make a grid row // @mixin make-row ( $gutter : $grid-gutter-width ) { display : flex ; flex-wrap : wrap ; margin-right : - $ gutter / 2 ; margin-left : - $ gutter / 2 ; } // make a grid column // // $size: number of columns wide // $columns: number of columns in the row // @mixin make-col ( $size , $columns : $grid-columns ) { flex : 0 0 percentage ( $ size / $ columns ); // Add a ` max-width ` to ensure content within each column does not blow out // the width of the column . Applies to IE10 + and Firefox . max-width : percentage ( $ size / $ columns ); } // make a grid column offset // // $size: number of columns to offset // $columns: number of columns in the row // @mixin make-col-offset ( $size , $columns : $grid-columns ) { $num : $size / $columns ; margin-left : if ( $ num == 0 , 0 , percentage ( $ num )); }","title":"Grid"},{"location":"mixins/grid/#grid","text":"/// Grid // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // The main mixins used to create the grid containers, rows and columns // used in .container and .container-fluid // @mixin make-container () { width : 100 % ; margin-right : auto ; margin-left : auto ; padding-right : ( $ grid-gutter-width / 2 ); padding-left : ( $ grid-gutter-width / 2 ); } // For each breakpoint, define the maximum width of the container // @mixin make-container-max-widths ( $max-widths : $container-max-widths , $breakpoints : $grid-breakpoints ) { @each $ breakpoint , $ container-max-width in $ max-widths { @include media-breakpoint-up ( $breakpoint , $breakpoints ) { max-width : $ container-max-width ; } } } // make a grid row // @mixin make-row ( $gutter : $grid-gutter-width ) { display : flex ; flex-wrap : wrap ; margin-right : - $ gutter / 2 ; margin-left : - $ gutter / 2 ; } // make a grid column // // $size: number of columns wide // $columns: number of columns in the row // @mixin make-col ( $size , $columns : $grid-columns ) { flex : 0 0 percentage ( $ size / $ columns ); // Add a ` max-width ` to ensure content within each column does not blow out // the width of the column . Applies to IE10 + and Firefox . max-width : percentage ( $ size / $ columns ); } // make a grid column offset // // $size: number of columns to offset // $columns: number of columns in the row // @mixin make-col-offset ( $size , $columns : $grid-columns ) { $num : $size / $columns ; margin-left : if ( $ num == 0 , 0 , percentage ( $ num )); }","title":"Grid"},{"location":"mixins/image/","text":"Image // Image // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // base image fluid mixin // // Usage: // @include img-fluid; // @mixin img-fluid () { display : block ; width : 100 % ; max-width : 100 % ; height : auto ; min-height : 1px ; }","title":"Image"},{"location":"mixins/image/#image","text":"// Image // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // base image fluid mixin // // Usage: // @include img-fluid; // @mixin img-fluid () { display : block ; width : 100 % ; max-width : 100 % ; height : auto ; min-height : 1px ; }","title":"Image"},{"location":"mixins/input/","text":"Input // Inputs // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // mixins to create form inputs // create a basic input // // Usage: // @include input; // @mixin input { box-sizing : border-box ; margin-bottom : $ input-margin-bottom ; color : $ input-font-color ; font-weight : $ input-font-weight ; font-family : inherit ; line-height : $ input-line-height ; background : $ input-background ; border : $ input-border-width solid $ input-border-color ; border-radius : $ input-border-radius ; box-shadow : none ; transition : $ input-transition ; } // input styles for focus state // // Usage: // @include input-focus(color(\"white\"), color(\"primary\")); // @mixin input-focus ( $background : $input-background-focus , $border-color : $input-border-color-focus ) { & :focus { background : $ background ; border-color : $ border-color ; outline : 0 ; } } // used internally to set the default width of form fields // based on the $input-use-full-width variable // @mixin input-width { max-width : 100 % ; // will stop the ability to stretch a textarea beyond 100 % width @ if $ input-use-full-width { width : 100 % ; } } // input size variation // // Usage: // @include input-size(1rem, 1rem, 15px); // @mixin input-size ( $padding-y : $input-padding-y , $padding-x : $input-padding-x , $font-size : $input-font-size ) { padding : $ padding-y $ padding-x ; font-size : $ font-size ; }","title":"Input"},{"location":"mixins/input/#input","text":"// Inputs // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // mixins to create form inputs // create a basic input // // Usage: // @include input; // @mixin input { box-sizing : border-box ; margin-bottom : $ input-margin-bottom ; color : $ input-font-color ; font-weight : $ input-font-weight ; font-family : inherit ; line-height : $ input-line-height ; background : $ input-background ; border : $ input-border-width solid $ input-border-color ; border-radius : $ input-border-radius ; box-shadow : none ; transition : $ input-transition ; } // input styles for focus state // // Usage: // @include input-focus(color(\"white\"), color(\"primary\")); // @mixin input-focus ( $background : $input-background-focus , $border-color : $input-border-color-focus ) { & :focus { background : $ background ; border-color : $ border-color ; outline : 0 ; } } // used internally to set the default width of form fields // based on the $input-use-full-width variable // @mixin input-width { max-width : 100 % ; // will stop the ability to stretch a textarea beyond 100 % width @ if $ input-use-full-width { width : 100 % ; } } // input size variation // // Usage: // @include input-size(1rem, 1rem, 15px); // @mixin input-size ( $padding-y : $input-padding-y , $padding-x : $input-padding-x , $font-size : $input-font-size ) { padding : $ padding-y $ padding-x ; font-size : $ font-size ; }","title":"Input"},{"location":"mixins/margin/","text":"Margin // Margin // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // setting margin // // Usage: // // >> @include margin('x', 1.5rem) // margin-left: 1.5rem; margin-right: 1.5rem // // >> @include margin('r', 1.5rem) // margin-right: 1.5rem // // >> @include margin; // margin: 0; // @mixin margin ( $axis : \"\" , $rem : 0 ) { @if $axis == \"x\" { margin : { right : $ rem ; left : $ rem ; } } @else if $ axis == \"y\" { margin : { top : $ rem ; bottom : $ rem ; } } @else if $ axis == \"t\" { margin-top : $ rem ; } @else if $ axis == \"r\" { margin-right : $ rem ; } @else if $ axis == \"b\" { margin-bottom : $ rem ; } @else if $ axis == \"l\" { margin-left : $ rem ; } @else { margin : $ rem ; } }","title":"Margin"},{"location":"mixins/margin/#margin","text":"// Margin // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // setting margin // // Usage: // // >> @include margin('x', 1.5rem) // margin-left: 1.5rem; margin-right: 1.5rem // // >> @include margin('r', 1.5rem) // margin-right: 1.5rem // // >> @include margin; // margin: 0; // @mixin margin ( $axis : \"\" , $rem : 0 ) { @if $axis == \"x\" { margin : { right : $ rem ; left : $ rem ; } } @else if $ axis == \"y\" { margin : { top : $ rem ; bottom : $ rem ; } } @else if $ axis == \"t\" { margin-top : $ rem ; } @else if $ axis == \"r\" { margin-right : $ rem ; } @else if $ axis == \"b\" { margin-bottom : $ rem ; } @else if $ axis == \"l\" { margin-left : $ rem ; } @else { margin : $ rem ; } }","title":"Margin"},{"location":"mixins/modernizr/","text":"Modernizr // Modernizr mixins // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // https://www.npmjs.com/package/modernizr // Provide a hover effect for non-touch devices, turn it into an Active state for mobile, and maintain a fallback. // @requires Modernizr as a JS dependency to get .no-touch classes // Adds styles via @content // // To apply it to a specific class, the mixin must be applied inside that class, like so (since it relies on the & operator): // .anchor { // @include touch-hover() { // color: purple; // } // } // @mixin touch-hover () { .no-js & :hover , // the fallback .no-js & :focus , .js.no-touch & :hover , // enhanced for no-touch .js.no-touch & :focus , .js.touch & :active { // relay same styles to active for touch devices @content ; } } // Applies transition to element but removes it from the same element on touch devices. // Useful for making all pseudo hover effects on mobile instant on click. // // @requires Modernizr // @mixin transition-no-touch ( $properties ) { transition : $ properties ; .js.touch & { transition : none ; } }","title":"Modernizr"},{"location":"mixins/modernizr/#modernizr","text":"// Modernizr mixins // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // https://www.npmjs.com/package/modernizr // Provide a hover effect for non-touch devices, turn it into an Active state for mobile, and maintain a fallback. // @requires Modernizr as a JS dependency to get .no-touch classes // Adds styles via @content // // To apply it to a specific class, the mixin must be applied inside that class, like so (since it relies on the & operator): // .anchor { // @include touch-hover() { // color: purple; // } // } // @mixin touch-hover () { .no-js & :hover , // the fallback .no-js & :focus , .js.no-touch & :hover , // enhanced for no-touch .js.no-touch & :focus , .js.touch & :active { // relay same styles to active for touch devices @content ; } } // Applies transition to element but removes it from the same element on touch devices. // Useful for making all pseudo hover effects on mobile instant on click. // // @requires Modernizr // @mixin transition-no-touch ( $properties ) { transition : $ properties ; .js.touch & { transition : none ; } }","title":"Modernizr"},{"location":"mixins/padding/","text":"Padding // Padding // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // setting padding // // Usage: // // >> @include padding('x', 1.5rem) // padding-left: 1.5rem; padding-right: 1.5rem // // >> @include padding('r', 1.5rem) // padding-right: 1.5rem // // >> @include padding; // padding: 0; // @mixin padding ( $axis : \"\" , $rem : 0 ) { @if $axis == \"x\" { padding : { right : $ rem ; left : $ rem ; } } @else if $ axis == \"y\" { padding : { top : $ rem ; bottom : $ rem ; } } @else if $ axis == \"t\" { padding-top : $ rem ; } @else if $ axis == \"r\" { padding-right : $ rem ; } @else if $ axis == \"b\" { padding-bottom : $ rem ; } @else if $ axis == \"l\" { padding-left : $ rem ; } @else { padding : $ rem ; } }","title":"Padding"},{"location":"mixins/padding/#padding","text":"// Padding // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // setting padding // // Usage: // // >> @include padding('x', 1.5rem) // padding-left: 1.5rem; padding-right: 1.5rem // // >> @include padding('r', 1.5rem) // padding-right: 1.5rem // // >> @include padding; // padding: 0; // @mixin padding ( $axis : \"\" , $rem : 0 ) { @if $axis == \"x\" { padding : { right : $ rem ; left : $ rem ; } } @else if $ axis == \"y\" { padding : { top : $ rem ; bottom : $ rem ; } } @else if $ axis == \"t\" { padding-top : $ rem ; } @else if $ axis == \"r\" { padding-right : $ rem ; } @else if $ axis == \"b\" { padding-bottom : $ rem ; } @else if $ axis == \"l\" { padding-left : $ rem ; } @else { padding : $ rem ; } }","title":"Padding"},{"location":"mixins/position/","text":"Position // Position // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // position an element // be sure to set the parent elements position to relative then this will use its full bounds // usefull for cards where the anchor is a child of the card to make the whole card clickable // // Usage: // >> @include position(0,0,0,0) // top: 0; right: 0; bottom: 0; left: 0; position: absolute; // @mixin position ( $top : auto , $right : auto , $bottom : auto , $left : auto , $position : absolute ) { position : $ position ; top : $ top ; right : $ right ; bottom : $ bottom ; left : $ left ; }","title":"Position"},{"location":"mixins/position/#position","text":"// Position // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // position an element // be sure to set the parent elements position to relative then this will use its full bounds // usefull for cards where the anchor is a child of the card to make the whole card clickable // // Usage: // >> @include position(0,0,0,0) // top: 0; right: 0; bottom: 0; left: 0; position: absolute; // @mixin position ( $top : auto , $right : auto , $bottom : auto , $left : auto , $position : absolute ) { position : $ position ; top : $ top ; right : $ right ; bottom : $ bottom ; left : $ left ; }","title":"Position"},{"location":"mixins/pseudo/","text":"Pseudo // Pseudo // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // pseudu // // useful for when styling :before or :after // you neally always need these 3 // // Usage: // @include pseudo; // @mixin pseudo ( $display : block , $pos : absolute , $content : \"\" ) { position : $ pos ; display : $ display ; content : $ content ; }","title":"Pseudo"},{"location":"mixins/pseudo/#pseudo","text":"// Pseudo // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // pseudu // // useful for when styling :before or :after // you neally always need these 3 // // Usage: // @include pseudo; // @mixin pseudo ( $display : block , $pos : absolute , $content : \"\" ) { position : $ pos ; display : $ display ; content : $ content ; }","title":"Pseudo"},{"location":"mixins/push-auto/","text":"Push Auto // Push Auto // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // useful for centrally aligning al element // though the margin mixin can do the same thing. // // Usage: // @include push--auto; // @mixin push--auto { margin : { right : auto ; left : auto ; } }","title":"Push Auto"},{"location":"mixins/push-auto/#push-auto","text":"// Push Auto // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // useful for centrally aligning al element // though the margin mixin can do the same thing. // // Usage: // @include push--auto; // @mixin push--auto { margin : { right : auto ; left : auto ; } }","title":"Push Auto"},{"location":"mixins/responsive-ratio/","text":"Responsive Ratio // Responsive Ratio // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // creating scalable elements (usually images, video placeholders, or background images) // that maintain a ratio. Either use the pseudo to scale it or not // // Usage: // @include responsive-ratio(16, 9, true); // @mixin responsive-ratio ( $x , $y , $pseudo : false ) { @if $pseudo { & ::before { @include pseudo ( $pos : relative ); width : 100 % ; padding-top : percentage ( $ y / $ x ); } } @else { padding-top : percentage ( $ y / $ x ); } }","title":"Responsive Ratio"},{"location":"mixins/responsive-ratio/#responsive-ratio","text":"// Responsive Ratio // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // creating scalable elements (usually images, video placeholders, or background images) // that maintain a ratio. Either use the pseudo to scale it or not // // Usage: // @include responsive-ratio(16, 9, true); // @mixin responsive-ratio ( $x , $y , $pseudo : false ) { @if $pseudo { & ::before { @include pseudo ( $pos : relative ); width : 100 % ; padding-top : percentage ( $ y / $ x ); } } @else { padding-top : percentage ( $ y / $ x ); } }","title":"Responsive Ratio"},{"location":"mixins/triangle/","text":"Triangle // CSS Triangle // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // css triangle // you are just left to move it into position // // Usage: // pointing down // @include css-triangle(color(\"red\"), down, 10px) // also has rounded corners // @include css-triangle(color(\"red\"), down, 10px, $round: true) // @mixin css-triangle ( $color , $direction , $size : 6 px , $position : absolute , $round : false ) { @include pseudo ( $pos : $position ); width : 0 ; height : 0 ; @ if $ round { border-radius : 3px ; } @if $direction == down { margin-top : 0 - round ( $ size / 2 .5 ); border-top : $ size solid $ color ; border-right : $ size solid transparent ; border-left : $ size solid transparent ; } @else if $ direction == up { margin-bottom : 0 - round ( $ size / 2 .5 ); border-right : $ size solid transparent ; border-bottom : $ size solid $ color ; border-left : $ size solid transparent ; } @else if $ direction == right { margin-right : - $ size ; border-top : $ size solid transparent ; border-bottom : $ size solid transparent ; border-left : $ size solid $ color ; } @else if $ direction == left { margin-left : - $ size ; border-top : $ size solid transparent ; border-right : $ size solid $ color ; border-bottom : $ size solid transparent ; } }","title":"Triangle"},{"location":"mixins/triangle/#triangle","text":"// CSS Triangle // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // css triangle // you are just left to move it into position // // Usage: // pointing down // @include css-triangle(color(\"red\"), down, 10px) // also has rounded corners // @include css-triangle(color(\"red\"), down, 10px, $round: true) // @mixin css-triangle ( $color , $direction , $size : 6 px , $position : absolute , $round : false ) { @include pseudo ( $pos : $position ); width : 0 ; height : 0 ; @ if $ round { border-radius : 3px ; } @if $direction == down { margin-top : 0 - round ( $ size / 2 .5 ); border-top : $ size solid $ color ; border-right : $ size solid transparent ; border-left : $ size solid transparent ; } @else if $ direction == up { margin-bottom : 0 - round ( $ size / 2 .5 ); border-right : $ size solid transparent ; border-bottom : $ size solid $ color ; border-left : $ size solid transparent ; } @else if $ direction == right { margin-right : - $ size ; border-top : $ size solid transparent ; border-bottom : $ size solid transparent ; border-left : $ size solid $ color ; } @else if $ direction == left { margin-left : - $ size ; border-top : $ size solid transparent ; border-right : $ size solid $ color ; border-bottom : $ size solid transparent ; } }","title":"Triangle"},{"location":"mixins/truncate/","text":"Truncate // Truncate // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // truncate text at defined width // // Usage: // @include truncate(100px); // @mixin truncate ( $truncation-boundary ) { max-width : $ truncation-boundary ; overflow : hidden ; white-space : nowrap ; text-overflow : ellipsis ; }","title":"Truncate"},{"location":"mixins/truncate/#truncate","text":"// Truncate // \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 // truncate text at defined width // // Usage: // @include truncate(100px); // @mixin truncate ( $truncation-boundary ) { max-width : $ truncation-boundary ; overflow : hidden ; white-space : nowrap ; text-overflow : ellipsis ; }","title":"Truncate"}]}